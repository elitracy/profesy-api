{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { React, useEffect, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar handleSearch = function handleSearch(text, profList, setProfList, originalProfList) {\n  var searchWord = text;\n  setProfList(searchWord);\n  var newFilter = profList.filter(function (value) {\n    return value.toLowerCase().includes(searchWord.toLowerCase());\n  });\n\n  if (searchWord === undefined) {\n    setProfList(originalProfList);\n  } else {\n    setProfList(newFilter);\n  }\n};\n\nfunction getProfsByCourse(course, setProfList, setOriginalProfList) {\n  return _regeneratorRuntime.async(function getProfsByCourse$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/profsByCourse?course=\" + course).then(function (result) {\n            return result.json();\n          }).then(function (result) {\n            setProfList(result.courses[0].profList);\n            setOriginalProfList(result.courses[0].profList);\n            return result;\n          }).catch(function (err) {\n            console.error(err);\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar getItem = function getItem(key, setStateItem) {\n  var val;\n  return _regeneratorRuntime.async(function getItem$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(key));\n\n        case 3:\n          val = _context2.sent;\n          setStateItem(val);\n          return _context2.abrupt(\"return\", val);\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log('error', _context2.t0.message);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nexport var Courses = function Courses(Props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      profList = _useState2[0],\n      setProfList = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      originalProfList = _useState4[0],\n      setOriginalProfList = _useState4[1];\n\n  useEffect(function () {\n    return getProfsByCourse(Props.route.params.courseName, setProfList);\n  }, [Props.route.params.courseName]);\n  return _jsx(SafeAreaView, {\n    children: _jsx(View, {\n      children: profList.length !== 0 && profList.sort().map(function (value) {\n        return _jsx(View, {\n          children: _jsx(Text, {\n            children: value\n          })\n        }, undefined);\n      })\n    })\n  });\n};","map":{"version":3,"sources":["/Users/elitracy/Documents/Coding/Projects/Profesy/public/components/Courses.tsx"],"names":["AsyncStorage","React","useEffect","useState","handleSearch","text","profList","setProfList","originalProfList","searchWord","newFilter","filter","value","toLowerCase","includes","undefined","getProfsByCourse","course","setOriginalProfList","fetch","then","result","json","courses","catch","err","console","error","getItem","key","setStateItem","val","log","message","Courses","Props","route","params","courseName","length","sort","map"],"mappings":"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","sourcesContent":["//IMPORTS\nimport {\n  Text,\n  SafeAreaView,\n  View,\n  TextInput,\n  TouchableOpacity,\n  Pressable,\n  ScrollView,\n} from 'react-native'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport { colors } from '../assets/colors'\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack'\nimport { RootStackParamList } from '../RootStackParams'\nimport { useNavigation } from '@react-navigation/native'\nimport { Icon } from 'react-native-elements'\nimport { React, useEffect, useState } from 'react'\n\ntype coursesScreenProp = NativeStackNavigationProp<\n  RootStackParamList,\n  'Courses'\n>\n\ninterface Props {\n  route: {\n    params: {\n      courseName: string\n    }\n  }\n}\n\n// FZF STRING MATCH\n// handleSearch - Params(text:string)\nconst handleSearch = (\n  text: string,\n  profList: string[],\n  setProfList: any,\n  originalProfList: string[]\n) => {\n  const searchWord = text\n  setProfList(searchWord)\n  const newFilter: string[] = profList.filter((value) => {\n    return value.toLowerCase().includes(searchWord.toLowerCase())\n  })\n  if (searchWord === undefined) {\n    setProfList(originalProfList)\n  } else {\n    setProfList(newFilter)\n  }\n}\n\nasync function getProfsByCourse(\n  course: string,\n  setProfList: any,\n  setOriginalProfList: any\n): Promise<any> {\n  // return await fetch(`https://profesy.herokuapp.com/?name=${name}`)\n  return await fetch(`http://localhost:8080/profsByCourse?course=${course}`)\n    .then((result) => result.json())\n    .then((result) => {\n      setProfList(result.courses[0].profList)\n      setOriginalProfList(result.courses[0].profList) //save prof list for if search is empty\n      return result\n    })\n    .catch((err) => {\n      console.error(err)\n    })\n}\n// getItem - Params(key: string, setStateItem: function) => string\nconst getItem = async (key: string, setStateItem: any) => {\n  try {\n    const val = await AsyncStorage.getItem(key)\n    setStateItem(val)\n    return val\n  } catch (e: any) {\n    console.log('error', e.message)\n  }\n}\n\nexport const Courses = (Props: Props) => {\n  const [profList, setProfList] = useState([])\n  const [originalProfList, setOriginalProfList] = useState([])\n  useEffect(\n    () => getProfsByCourse(Props.route.params.courseName, setProfList),\n    [Props.route.params.courseName]\n  )\n\n  // console.log(profList)\n  return (\n    <SafeAreaView>\n      <View>\n        {profList.length !== 0 &&\n          profList.sort().map((value) => {\n            return (\n              <View key={undefined}>\n                <Text>{value}</Text>\n              </View>\n            )\n          })}\n      </View>\n    </SafeAreaView>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}