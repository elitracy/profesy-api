{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport tailwind from 'tailwind-rn';\nimport { useState } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { colors } from \"../assets/colors\";\nimport { sha256 } from 'js-sha256';\nimport React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction signupAPI(username, password, email, name, setUsernameExists, setEmailExists) {\n  return _regeneratorRuntime.async(function signupAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", fetch(\"https://profesy.herokuapp.com/signup?username=\" + username + \"&password=\" + password + \"&email=\" + email + \"&name=\" + name).then(function (res) {\n            return res.json();\n          }).then(function (data) {\n            if (data.userInsert === 0) {\n              setEmailExists(data.emailExists);\n              setUsernameExists(data.usernameExists);\n            }\n\n            return data;\n          }).catch(function (err) {\n            console.error(err);\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar storeItem = function storeItem(key, value) {\n  var val;\n  return _regeneratorRuntime.async(function storeItem$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(key, value));\n\n        case 3:\n          val = _context2.sent;\n          return _context2.abrupt(\"return\", val);\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log('error', _context2.t0.message);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\n\nexport function Signup() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      username = _useState2[0],\n      setUsername = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      passwordConf = _useState6[0],\n      setPasswordConf = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      name = _useState8[0],\n      setName = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      email = _useState10[0],\n      setEmail = _useState10[1];\n\n  var _useState11 = useState('rgba(150, 150, 150, .5)'),\n      _useState12 = _slicedToArray(_useState11, 2),\n      usernameBG = _useState12[0],\n      setUsernameBG = _useState12[1];\n\n  var _useState13 = useState('rgba(150, 150, 150, .5)'),\n      _useState14 = _slicedToArray(_useState13, 2),\n      passwordBG = _useState14[0],\n      setPasswordBG = _useState14[1];\n\n  var _useState15 = useState('rgba(150, 150, 150, .5)'),\n      _useState16 = _slicedToArray(_useState15, 2),\n      passwordConfBG = _useState16[0],\n      setPasswordConfBG = _useState16[1];\n\n  var _useState17 = useState('rgba(150, 150, 150, .5)'),\n      _useState18 = _slicedToArray(_useState17, 2),\n      nameBG = _useState18[0],\n      setNameBG = _useState18[1];\n\n  var _useState19 = useState('rgba(150, 150, 150, .5)'),\n      _useState20 = _slicedToArray(_useState19, 2),\n      emailBG = _useState20[0],\n      setEmailBG = _useState20[1];\n\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      usernameExists = _useState22[0],\n      setUsernameExists = _useState22[1];\n\n  var _useState23 = useState(true),\n      _useState24 = _slicedToArray(_useState23, 2),\n      passwordMatch = _useState24[0],\n      setPasswordMatch = _useState24[1];\n\n  var _useState25 = useState(false),\n      _useState26 = _slicedToArray(_useState25, 2),\n      emailExists = _useState26[0],\n      setEmailExists = _useState26[1];\n\n  var navigation = useNavigation();\n  return _jsxs(SafeAreaView, {\n    style: tailwind('w-full h-full justify-start items-center mt-20'),\n    children: [_jsx(StatusBar, {\n      animated: true,\n      backgroundColor: \"#61dafb\",\n      barStyle: 'dark-content',\n      showHideTransition: 'slide'\n    }), _jsx(View, {\n      style: styles.titleBorderStyles,\n      children: _jsx(Text, {\n        style: styles.titleStyles,\n        children: \"Profesi\"\n      })\n    }), _jsxs(View, {\n      style: {\n        width: '65%',\n        marginTop: 15\n      },\n      children: [_jsx(TextInput, {\n        onChangeText: setUsername,\n        autoCapitalize: \"none\",\n        onFocus: function onFocus() {\n          return setUsernameBG('#10b981');\n        },\n        onBlur: function onBlur() {\n          return setUsernameBG('rgba(150, 150, 150, .5)');\n        },\n        value: username,\n        clearTextOnFocus: true,\n        placeholder: \"Username\",\n        style: [styles.inputStyles, {\n          marginBottom: 10,\n          borderColor: usernameBG,\n          color: username === 'username' ? colors.GREY : 'black'\n        }]\n      }), _jsx(TextInput, {\n        onChangeText: setPassword,\n        autoCapitalize: \"none\",\n        clearTextOnFocus: true,\n        onFocus: function onFocus() {\n          return setPasswordBG('#10b981');\n        },\n        onBlur: function onBlur() {\n          return setPasswordBG('rgba(150, 150, 150, .5)');\n        },\n        style: [styles.inputStyles, {\n          marginBottom: 6,\n          borderColor: passwordBG\n        }],\n        value: password,\n        placeholder: \"Password\",\n        secureTextEntry: true\n      }), _jsx(TextInput, {\n        onChangeText: setPasswordConf,\n        autoCapitalize: \"none\",\n        clearTextOnFocus: true,\n        onFocus: function onFocus() {\n          return setPasswordConfBG('#10b981');\n        },\n        onBlur: function onBlur() {\n          return setPasswordConfBG('rgba(150, 150, 150, .5)');\n        },\n        style: [styles.inputStyles, {\n          marginBottom: 6,\n          borderColor: passwordConfBG\n        }],\n        value: passwordConf,\n        placeholder: \"Confirm Password\",\n        secureTextEntry: true\n      }), _jsx(TextInput, {\n        onChangeText: setEmail,\n        autoCapitalize: \"none\",\n        clearTextOnFocus: true,\n        onFocus: function onFocus() {\n          return setEmailBG('#10b981');\n        },\n        onBlur: function onBlur() {\n          return setEmailBG('rgba(150, 150, 150, .5)');\n        },\n        style: [styles.inputStyles, {\n          marginBottom: 6,\n          borderColor: emailBG\n        }],\n        value: email,\n        placeholder: \"Email\"\n      }), _jsx(TextInput, {\n        onChangeText: setName,\n        autoCapitalize: \"none\",\n        clearTextOnFocus: true,\n        onFocus: function onFocus() {\n          return setNameBG('#10b981');\n        },\n        onBlur: function onBlur() {\n          return setNameBG('rgba(150, 150, 150, .5)');\n        },\n        style: [styles.inputStyles, {\n          marginBottom: 6,\n          borderColor: nameBG\n        }],\n        value: name,\n        placeholder: \"Name\"\n      }), _jsxs(View, {\n        style: {\n          flexDirection: 'column'\n        },\n        children: [!passwordMatch ? _jsx(Text, {\n          style: styles.incorrectSignupStyles,\n          children: \"Passwords do not match\"\n        }) : null, usernameExists ? _jsx(Text, {\n          style: styles.incorrectSignupStyles,\n          children: \"Username already exists\"\n        }) : null, emailExists ? _jsx(Text, {\n          style: styles.incorrectSignupStyles,\n          children: \"Email already exists\"\n        }) : null, _jsx(TouchableOpacity, {\n          style: {\n            flex: 1\n          },\n          onPress: function onPress() {\n            return navigation.navigate('Login');\n          },\n          children: _jsx(Text, {\n            style: styles.signupPasswordStyles,\n            children: \"Have an account?\"\n          })\n        })]\n      }), _jsx(TouchableOpacity, {\n        style: {\n          borderColor: 'black',\n          width: '100%',\n          borderWidth: 2,\n          borderRadius: 20,\n          marginTop: 5\n        },\n        onPress: function onPress() {\n          setPasswordMatch(password === passwordConf);\n\n          if (passwordMatch) {\n            signupAPI(username, sha256(password), email, name, setUsernameExists, setEmailExists).then(function (res) {\n              if (res.userInsert === 1) {\n                storeItem('name', res.name);\n                storeItem('username', res.username);\n                storeItem('email', res.email);\n              }\n\n              res.userInsert === 1 ? navigation.navigate('Home') : null;\n            });\n          }\n        },\n        children: _jsx(Text, {\n          style: styles.signupStyles,\n          children: \"Sign Up\"\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  titleStyles: {\n    color: 'black',\n    fontSize: 80,\n    shadowColor: colors.PURPLE,\n    shadowOffset: {\n      width: 2,\n      height: 2\n    },\n    shadowOpacity: 1,\n    shadowRadius: 0\n  },\n  titleBorderStyles: {\n    borderBottomWidth: 2,\n    borderBottomColor: colors.GREY,\n    marginBottom: '3%',\n    paddingRight: '8%',\n    paddingLeft: '8%',\n    paddingBottom: '-0%'\n  },\n  inputStyles: {\n    borderWidth: 2,\n    borderRadius: 5,\n    padding: 8,\n    paddingLeft: 5,\n    fontSize: 15\n  },\n  incorrectSignupStyles: {\n    textAlign: 'center',\n    padding: 4,\n    paddingTop: 4,\n    color: 'red',\n    fontStyle: 'italic'\n  },\n  forgotPasswordStyles: {\n    textAlign: 'center',\n    padding: 4,\n    paddingTop: 8\n  },\n  signupPasswordStyles: {\n    textAlign: 'center',\n    padding: 2,\n    color: 'black'\n  },\n  signupStyles: {\n    color: 'black',\n    fontSize: 40,\n    textAlign: 'center',\n    paddingVertical: 8,\n    fontWeight: '300',\n    letterSpacing: 5,\n    shadowColor: colors.GREEN,\n    shadowOffset: {\n      width: 2,\n      height: 2\n    },\n    shadowOpacity: 1,\n    shadowRadius: 0\n  }\n});","map":{"version":3,"sources":["/Users/elitracy/Documents/Coding/Projects/Profesy/public/components/Signup.tsx"],"names":["AsyncStorage","tailwind","useState","useNavigation","colors","sha256","React","signupAPI","username","password","email","name","setUsernameExists","setEmailExists","fetch","then","res","json","data","userInsert","emailExists","usernameExists","catch","err","console","error","storeItem","key","value","setItem","val","log","message","Signup","setUsername","setPassword","passwordConf","setPasswordConf","setName","setEmail","usernameBG","setUsernameBG","passwordBG","setPasswordBG","passwordConfBG","setPasswordConfBG","nameBG","setNameBG","emailBG","setEmailBG","passwordMatch","setPasswordMatch","navigation","styles","titleBorderStyles","titleStyles","width","marginTop","inputStyles","marginBottom","borderColor","color","GREY","flexDirection","incorrectSignupStyles","flex","navigate","signupPasswordStyles","borderWidth","borderRadius","signupStyles","StyleSheet","create","fontSize","shadowColor","PURPLE","shadowOffset","height","shadowOpacity","shadowRadius","borderBottomWidth","borderBottomColor","paddingRight","paddingLeft","paddingBottom","padding","textAlign","paddingTop","fontStyle","forgotPasswordStyles","paddingVertical","fontWeight","letterSpacing","GREEN"],"mappings":"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","sourcesContent":["// IMPORTS\nimport {\n  StyleSheet,\n  SafeAreaView,\n  Text,\n  TextInput,\n  View,\n  StatusBar,\n  TouchableOpacity,\n} from 'react-native'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport tailwind from 'tailwind-rn'\nimport { useState } from 'react'\nimport { useNavigation } from '@react-navigation/native'\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack'\nimport { RootStackParamList } from '../RootStackParams'\nimport { colors } from '../assets/colors'\nimport { sha256 } from 'js-sha256'\nimport React from 'react'\n\ntype signupScreenProp = NativeStackNavigationProp<RootStackParamList, 'Signup'>\n\n// signupAPI - Params(username:string,password:string,email:string,name:string,setUsernameExists:function,setEmailExists:function)\nasync function signupAPI(\n  username: string,\n  password: string,\n  email: string,\n  name: string,\n  setUsernameExists: any,\n  setEmailExists: any\n) {\n  return fetch(\n    `https://profesy.herokuapp.com/signup?username=${username}&password=${password}&email=${email}&name=${name}`\n  )\n    .then((res) => {\n      return res.json()\n    })\n    .then((data) => {\n      if (data.userInsert === 0) {\n        setEmailExists(data.emailExists)\n        setUsernameExists(data.usernameExists)\n      }\n      return data\n    })\n    .catch((err) => {\n      console.error(err)\n    })\n}\n\n// storeItem - Params(key:string, value:any) => value:any\nconst storeItem = async (key: string, value: any) => {\n  try {\n    const val = await AsyncStorage.setItem(key, value)\n    return val\n  } catch (e: any) {\n    console.log('error', e.message)\n  }\n}\n\nexport function Signup() {\n  // SET STATES\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [passwordConf, setPasswordConf] = useState('')\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [usernameBG, setUsernameBG] = useState('rgba(150, 150, 150, .5)')\n  const [passwordBG, setPasswordBG] = useState('rgba(150, 150, 150, .5)')\n  const [passwordConfBG, setPasswordConfBG] = useState(\n    'rgba(150, 150, 150, .5)'\n  )\n  const [nameBG, setNameBG] = useState('rgba(150, 150, 150, .5)')\n  const [emailBG, setEmailBG] = useState('rgba(150, 150, 150, .5)')\n  const [usernameExists, setUsernameExists] = useState(false)\n  const [passwordMatch, setPasswordMatch] = useState(true)\n  const [emailExists, setEmailExists] = useState(false)\n\n  const navigation = useNavigation<signupScreenProp>()\n\n  return (\n    <SafeAreaView\n      style={tailwind('w-full h-full justify-start items-center mt-20')}\n    >\n      <StatusBar\n        animated={true}\n        backgroundColor=\"#61dafb\"\n        barStyle={'dark-content'}\n        showHideTransition={'slide'}\n      />\n      <View style={styles.titleBorderStyles}>\n        <Text style={styles.titleStyles}>Profesi</Text>\n      </View>\n\n      {/*INPUTS*/}\n      <View style={{ width: '65%', marginTop: 15 }}>\n        {/*Username*/}\n        <TextInput\n          onChangeText={setUsername}\n          autoCapitalize=\"none\"\n          onFocus={() => setUsernameBG('#10b981')}\n          onBlur={() => setUsernameBG('rgba(150, 150, 150, .5)')}\n          value={username}\n          clearTextOnFocus={true}\n          placeholder=\"Username\"\n          style={[\n            styles.inputStyles,\n            {\n              marginBottom: 10,\n              borderColor: usernameBG,\n              color: username === 'username' ? colors.GREY : 'black',\n            },\n          ]}\n        />\n        {/*Password*/}\n        <TextInput\n          onChangeText={setPassword}\n          autoCapitalize=\"none\"\n          clearTextOnFocus={true}\n          onFocus={() => setPasswordBG('#10b981')}\n          onBlur={() => setPasswordBG('rgba(150, 150, 150, .5)')}\n          style={[\n            styles.inputStyles,\n            {\n              marginBottom: 6,\n              borderColor: passwordBG,\n            },\n          ]}\n          value={password}\n          placeholder=\"Password\"\n          secureTextEntry={true}\n        />\n        {/*Confirm Password*/}\n        <TextInput\n          onChangeText={setPasswordConf}\n          autoCapitalize=\"none\"\n          clearTextOnFocus={true}\n          onFocus={() => setPasswordConfBG('#10b981')}\n          onBlur={() => setPasswordConfBG('rgba(150, 150, 150, .5)')}\n          style={[\n            styles.inputStyles,\n            {\n              marginBottom: 6,\n              borderColor: passwordConfBG,\n            },\n          ]}\n          value={passwordConf}\n          placeholder=\"Confirm Password\"\n          secureTextEntry={true}\n        />\n        {/*Email*/}\n        <TextInput\n          onChangeText={setEmail}\n          autoCapitalize=\"none\"\n          clearTextOnFocus={true}\n          onFocus={() => setEmailBG('#10b981')}\n          onBlur={() => setEmailBG('rgba(150, 150, 150, .5)')}\n          style={[\n            styles.inputStyles,\n            {\n              marginBottom: 6,\n              borderColor: emailBG,\n            },\n          ]}\n          value={email}\n          placeholder=\"Email\"\n        />\n        {/*Name*/}\n        <TextInput\n          onChangeText={setName}\n          autoCapitalize=\"none\"\n          clearTextOnFocus={true}\n          onFocus={() => setNameBG('#10b981')}\n          onBlur={() => setNameBG('rgba(150, 150, 150, .5)')}\n          style={[\n            styles.inputStyles,\n            {\n              marginBottom: 6,\n              borderColor: nameBG,\n            },\n          ]}\n          value={name}\n          placeholder=\"Name\"\n        />\n\n        {/*Error checking for inputs*/}\n        <View style={{ flexDirection: 'column' }}>\n          {/*passwords don't match*/}\n          {!passwordMatch ? (\n            <Text style={styles.incorrectSignupStyles}>\n              Passwords do not match\n            </Text>\n          ) : null}\n\n          {/*username already exists*/}\n          {usernameExists ? (\n            <Text style={styles.incorrectSignupStyles}>\n              Username already exists\n            </Text>\n          ) : null}\n\n          {/*email already exists*/}\n          {emailExists ? (\n            <Text style={styles.incorrectSignupStyles}>\n              Email already exists\n            </Text>\n          ) : null}\n\n          {/*user has account => go to login screen*/}\n          <TouchableOpacity\n            style={{ flex: 1 }}\n            onPress={() => navigation.navigate('Login')}\n          >\n            <Text style={styles.signupPasswordStyles}>Have an account?</Text>\n          </TouchableOpacity>\n        </View>\n        {/*Signup Button*/}\n        <TouchableOpacity\n          style={{\n            borderColor: 'black',\n            width: '100%',\n            borderWidth: 2,\n            borderRadius: 20,\n            marginTop: 5,\n          }}\n          onPress={() => {\n            setPasswordMatch(password === passwordConf)\n            if (passwordMatch) {\n              //check database\n              signupAPI(\n                username,\n                sha256(password),\n                email,\n                name,\n                setUsernameExists,\n                setEmailExists\n              ).then((res) => {\n                if (res.userInsert === 1) {\n                  //store user info in cache\n                  storeItem('name', res.name)\n                  storeItem('username', res.username)\n                  storeItem('email', res.email)\n                }\n                res.userInsert === 1 ? navigation.navigate('Home') : null\n              })\n            }\n          }}\n        >\n          <Text style={styles.signupStyles}>Sign Up</Text>\n        </TouchableOpacity>\n      </View>\n    </SafeAreaView>\n  )\n}\n\n// STYLES - NOTE: convert to inline\nconst styles = StyleSheet.create({\n  titleStyles: {\n    color: 'black',\n    fontSize: 80,\n    shadowColor: colors.PURPLE,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 1,\n    shadowRadius: 0,\n  },\n  titleBorderStyles: {\n    borderBottomWidth: 2,\n    borderBottomColor: colors.GREY,\n    marginBottom: '3%',\n    paddingRight: '8%',\n    paddingLeft: '8%',\n    paddingBottom: '-0%',\n  },\n  inputStyles: {\n    borderWidth: 2,\n    borderRadius: 5,\n    padding: 8,\n    paddingLeft: 5,\n    fontSize: 15,\n  },\n  incorrectSignupStyles: {\n    textAlign: 'center',\n    padding: 4,\n    paddingTop: 4,\n    color: 'red',\n    fontStyle: 'italic',\n  },\n  forgotPasswordStyles: {\n    textAlign: 'center',\n    padding: 4,\n    paddingTop: 8,\n  },\n  signupPasswordStyles: {\n    textAlign: 'center',\n    padding: 2,\n    color: 'black',\n  },\n  signupStyles: {\n    color: 'black',\n    fontSize: 40,\n    textAlign: 'center',\n    paddingVertical: 8,\n    fontWeight: '300',\n    letterSpacing: 5,\n    shadowColor: colors.GREEN,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 1,\n    shadowRadius: 0,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}