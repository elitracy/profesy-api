{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useState } from 'react';\nimport { colors } from \"../assets/colors\";\nimport { useNavigation } from '@react-navigation/native';\nimport { Icon } from 'react-native-elements';\nimport React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction getProfessor(name, setFilteredData) {\n  return _regeneratorRuntime.async(function getProfessor$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"https://profesy.herokuapp.com/professors?name=\" + name).then(function (result) {\n            return result.json();\n          }).then(function (result) {\n            setFilteredData(result.professors);\n            return result;\n          }).catch(function (err) {\n            console.error(err);\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getCourses(course, setFilteredData) {\n  return _regeneratorRuntime.async(function getCourses$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/courses?course=\" + course).then(function (result) {\n            return result.json();\n          }).then(function (result) {\n            setFilteredData(result.message);\n            return result;\n          }).catch(function (err) {\n            console.error(err);\n          }));\n\n        case 2:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar getItem = function getItem(key, setStateItem) {\n  var val;\n  return _regeneratorRuntime.async(function getItem$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(key));\n\n        case 3:\n          val = _context3.sent;\n          setStateItem(val);\n          return _context3.abrupt(\"return\", val);\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log('error', _context3.t0.message);\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nexport var Home = function Home() {\n  var _useState = useState('black'),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchBG = _useState2[0],\n      setSearchBG = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filteredProfData = _useState4[0],\n      setFilteredProfData = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      filteredCourseData = _useState6[0],\n      setFilteredCourseData = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      wordEntered = _useState8[0],\n      setWordEntered = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      nameTitle = _useState10[0],\n      setNameTitle = _useState10[1];\n\n  var _useState11 = useState('false'),\n      _useState12 = _slicedToArray(_useState11, 2),\n      loggedIn = _useState12[0],\n      setLoggedIn = _useState12[1];\n\n  var _useState13 = useState('p'),\n      _useState14 = _slicedToArray(_useState13, 2),\n      filterType = _useState14[0],\n      setFilterType = _useState14[1];\n\n  getItem('name', setNameTitle);\n  getItem('loggedIn', setLoggedIn);\n  var navigation = useNavigation();\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.nav,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: \"Profesy\"\n      }), _jsx(Text, {\n        style: [styles.username, {\n          opacity: loggedIn === 'true' ? 1 : 0\n        }],\n        children: nameTitle\n      })]\n    }), _jsxs(View, {\n      style: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: [_jsxs(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'center',\n          backgroundColor: 'white',\n          borderRadius: 5,\n          width: '100%'\n        },\n        children: [_jsx(Icon, {\n          name: \"search\",\n          style: {\n            opacity: 0.7,\n            marginLeft: 5\n          },\n          tvParallaxProperties: null\n        }), _jsx(TextInput, {\n          onChangeText: function onChangeText(data) {\n            setWordEntered(data === undefined ? '' : data);\n            getProfessor(data, setFilteredProfData);\n            getCourses(data, setFilteredCourseData);\n          },\n          value: wordEntered,\n          placeholder: \"search\",\n          style: [styles.inputStyles, {\n            borderColor: searchBG,\n            width: '100%',\n            marginLeft: -30\n          }]\n        })]\n      }), _jsxs(View, {\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          width: '100%',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          paddingTop: 5\n        },\n        children: [_jsx(Pressable, {\n          style: {\n            backgroundColor: filterType === 'p' ? colors.GREY : null,\n            width: '49%',\n            borderColor: colors.GREY,\n            borderWidth: 2,\n            borderRadius: 5\n          },\n          onPress: function onPress() {\n            setFilterType('p');\n          },\n          children: _jsx(Text, {\n            style: {\n              color: 'white',\n              fontWeight: '800',\n              textAlign: 'center',\n              padding: 5,\n              paddingVertical: 7\n            },\n            children: \"Professor\"\n          })\n        }), _jsx(Pressable, {\n          style: {\n            backgroundColor: filterType === 'c' ? colors.GREY : null,\n            width: '49%',\n            borderColor: colors.GREY,\n            borderColor: colors.GREY,\n            borderWidth: 2,\n            borderRadius: 5\n          },\n          onPress: function onPress() {\n            setFilterType('c');\n          },\n          children: _jsx(Text, {\n            style: {\n              color: 'white',\n              textAlign: 'center',\n              padding: 5,\n              paddingVertical: 7,\n              fontWeight: '800'\n            },\n            children: \"Course\"\n          })\n        })]\n      })]\n    }), filteredProfData.length !== 0 || filteredCourseData.length !== 0 || wordEntered.length === 0 ? _jsxs(ScrollView, {\n      style: {\n        width: '100%',\n        height: 'auto',\n        flexDirection: 'column'\n      },\n      children: [filterType === 'p' && filteredProfData.slice(0, 10).sort(function (a, b) {\n        return a.overallGPA - b.overallGPA;\n      }).map(function (value) {\n        return _jsxs(TouchableOpacity, {\n          style: [styles.profResultContainer, {\n            shadowColor: parseFloat(value.overallGPA) > 3.6 ? colors.BLUE : parseFloat(value.overallGPA) > 3.0 ? colors.GREEN : parseFloat(value.overallGPA) > 2.4 ? colors.ORANGE : colors.RED\n          }],\n          onPress: function onPress() {\n            return navigation.navigate('Professor', {\n              profName: value.name,\n              courses: value.courses\n            });\n          },\n          children: [_jsxs(Text, {\n            style: {\n              padding: 5,\n              paddingLeft: 15,\n              color: 'white',\n              fontSize: 25,\n              textAlign: 'left',\n              fontWeight: '500'\n            },\n            children: [value.name, ' ']\n          }), _jsx(Text, {\n            style: {\n              paddingRight: 15,\n              textAlign: 'right',\n              fontWeight: '800',\n              fontSize: 25,\n              color: parseFloat(value.overallGPA) > 3.6 ? colors.BLUE : parseFloat(value.overallGPA) > 3.0 ? colors.GREEN : parseFloat(value.overallGPA) > 2.4 ? colors.ORANGE : colors.RED\n            },\n            children: parseFloat(value.overallGPA).toFixed(2)\n          })]\n        }, undefined);\n      }), filterType === 'c' && filteredCourseData.sort().slice(0, 10).map(function (value) {\n        return _jsx(TouchableOpacity, {\n          style: [styles.courseResultContainer],\n          onPress: function onPress() {\n            return navigation.navigate('Courses', {\n              courseName: value\n            });\n          },\n          children: _jsx(Text, {\n            style: {\n              padding: 5,\n              paddingLeft: 15,\n              color: 'white',\n              fontSize: 25,\n              textAlign: 'left',\n              fontWeight: '500'\n            },\n            children: value\n          })\n        }, undefined);\n      })]\n    }) : _jsx(View, {\n      style: {\n        width: '100%',\n        height: '5%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(Text, {\n        style: {\n          color: 'white',\n          fontSize: 15\n        },\n        children: \"Loading ...\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    flexDirection: 'column',\n    height: '88%',\n    backgroundColor: 'black',\n    width: '100%'\n  },\n  title: {\n    fontSize: 35,\n    textAlign: 'left',\n    flex: 3,\n    fontWeight: '700',\n    color: 'white'\n  },\n  nav: {\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    paddingHorizontal: 0,\n    paddingBottom: 15,\n    marginTop: 8,\n    color: 'white'\n  },\n  username: {\n    flex: 3,\n    textAlign: 'right',\n    paddingRight: 10,\n    fontSize: 25,\n    color: 'white'\n  },\n  inputStyles: {\n    borderWidth: 2,\n    borderRightWidth: 0,\n    borderLeftWidth: 0,\n    padding: 10,\n    paddingLeft: 30,\n    fontSize: 15\n  },\n  profResultContainer: {\n    backgroundColor: 'black',\n    width: '100%',\n    flexDirection: 'row',\n    padding: 5,\n    paddingVertical: 8,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  courseResultContainer: {\n    borderRadius: 15,\n    backgroundColor: 'black',\n    width: '100%',\n    flexDirection: 'column',\n    padding: 5,\n    marginVertical: 6,\n    shadowOffset: {\n      width: 4,\n      height: 3\n    },\n    shadowOpacity: 1,\n    shadowRadius: 0\n  }\n});","map":{"version":3,"sources":["/Users/elitracy/Documents/Coding/Projects/Profesy/public/components/Home.tsx"],"names":["AsyncStorage","useState","colors","useNavigation","Icon","React","getProfessor","name","setFilteredData","fetch","then","result","json","professors","catch","err","console","error","getCourses","course","message","getItem","key","setStateItem","val","log","Home","searchBG","setSearchBG","filteredProfData","setFilteredProfData","filteredCourseData","setFilteredCourseData","wordEntered","setWordEntered","nameTitle","setNameTitle","loggedIn","setLoggedIn","filterType","setFilterType","navigation","styles","container","nav","title","username","opacity","width","display","justifyContent","alignItems","flexDirection","backgroundColor","borderRadius","marginLeft","data","undefined","inputStyles","borderColor","paddingTop","GREY","borderWidth","color","fontWeight","textAlign","padding","paddingVertical","length","height","slice","sort","a","b","overallGPA","map","value","profResultContainer","shadowColor","parseFloat","BLUE","GREEN","ORANGE","RED","navigate","profName","courses","paddingLeft","fontSize","paddingRight","toFixed","courseResultContainer","courseName","StyleSheet","create","flex","paddingHorizontal","paddingBottom","marginTop","borderRightWidth","borderLeftWidth","marginVertical","shadowOffset","shadowOpacity","shadowRadius"],"mappings":"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","sourcesContent":["//IMPORTS\nimport {\n  StyleSheet,\n  Text,\n  SafeAreaView,\n  View,\n  TextInput,\n  TouchableOpacity,\n  Pressable,\n  ScrollView,\n} from 'react-native'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport { useState } from 'react'\nimport { colors } from '../assets/colors'\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack'\nimport { RootStackParamList, Course } from '../RootStackParams'\nimport { useNavigation } from '@react-navigation/native'\nimport { Icon } from 'react-native-elements'\nimport React from 'react'\n\ntype homeScreenProp = NativeStackNavigationProp<RootStackParamList, 'Home'>\n\n// getProfessor - Params(name: string, setFilteredData: function) => Promise\nasync function getProfessor(name: string, setFilteredData: any): Promise<any> {\n  return await fetch(`https://profesy.herokuapp.com/professors?name=${name}`)\n    .then((result) => result.json())\n    .then((result) => {\n      setFilteredData(result.professors)\n      return result\n    })\n    .catch((err) => {\n      console.error(err)\n    })\n}\n\nasync function getCourses(course: string, setFilteredData: any): Promise<any> {\n  // return await fetch(`https://profesy.herokuapp.com/?name=${name}`)\n  return await fetch(`http://localhost:8080/courses?course=${course}`)\n    .then((result) => result.json())\n    .then((result) => {\n      setFilteredData(result.message)\n      return result\n    })\n    .catch((err) => {\n      console.error(err)\n    })\n}\n\n// getItem - Params(key: string, setStateItem: function) => string\nconst getItem = async (key: string, setStateItem: any) => {\n  try {\n    const val = await AsyncStorage.getItem(key)\n    setStateItem(val)\n    return val\n  } catch (e: any) {\n    console.log('error', e.message)\n  }\n}\n\nexport const Home = () => {\n  // set states\n  const [searchBG, setSearchBG] = useState('black')\n  const [filteredProfData, setFilteredProfData] = useState([])\n  const [filteredCourseData, setFilteredCourseData] = useState([])\n  const [wordEntered, setWordEntered] = useState('')\n  const [nameTitle, setNameTitle] = useState('')\n  const [loggedIn, setLoggedIn] = useState('false')\n  const [filterType, setFilterType] = useState('p')\n\n  getItem('name', setNameTitle)\n  getItem('loggedIn', setLoggedIn)\n\n  const navigation = useNavigation<homeScreenProp>()\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {/*header titles*/}\n      <View style={styles.nav}>\n        <Text style={styles.title}>Profesy</Text>\n        <Text\n          style={[styles.username, { opacity: loggedIn === 'true' ? 1 : 0 }]}\n        >\n          {nameTitle}\n        </Text>\n      </View>\n\n      {/*search bar*/}\n      <View\n        style={{\n          width: '100%',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <View\n          style={{\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'center',\n            backgroundColor: 'white',\n            borderRadius: 5,\n            width: '100%',\n          }}\n        >\n          <Icon\n            name=\"search\"\n            style={{ opacity: 0.7, marginLeft: 5 }}\n            tvParallaxProperties={null}\n          />\n          <TextInput\n            // queries both at first time for better UX\n            onChangeText={(data) => {\n              setWordEntered(data === undefined ? '' : data)\n              // if (filterType === 'p') {\n              getProfessor(data, setFilteredProfData)\n              // } else if\n              getCourses(data, setFilteredCourseData)\n              // }\n            }}\n            // onFocus={() => setSearchBG(colors.GREY)}\n            // onBlur={() => setSearchBG(colors.GREY)}\n            value={wordEntered}\n            placeholder=\"search\"\n            style={[\n              styles.inputStyles,\n              { borderColor: searchBG, width: '100%', marginLeft: -30 },\n            ]}\n          />\n        </View>\n\n        {/*filter buttons*/}\n        <View\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            width: '100%',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            paddingTop: 5,\n          }}\n        >\n          <Pressable\n            style={{\n              backgroundColor: filterType === 'p' ? colors.GREY : null,\n              width: '49%',\n              borderColor: colors.GREY,\n              borderWidth: 2,\n              borderRadius: 5,\n            }}\n            onPress={() => {\n              setFilterType('p')\n            }}\n          >\n            <Text\n              style={{\n                color: 'white',\n                fontWeight: '800',\n                textAlign: 'center',\n                padding: 5,\n                paddingVertical: 7,\n              }}\n            >\n              Professor\n            </Text>\n          </Pressable>\n          <Pressable\n            style={{\n              backgroundColor: filterType === 'c' ? colors.GREY : null,\n              width: '49%',\n              borderColor: colors.GREY,\n              borderColor: colors.GREY,\n              borderWidth: 2,\n              borderRadius: 5,\n            }}\n            onPress={() => {\n              setFilterType('c')\n            }}\n          >\n            <Text\n              style={{\n                color: 'white',\n                textAlign: 'center',\n                padding: 5,\n                paddingVertical: 7,\n                fontWeight: '800',\n              }}\n            >\n              Course\n            </Text>\n          </Pressable>\n        </View>\n      </View>\n\n      {/*search results*/}\n      {filteredProfData.length !== 0 ||\n      filteredCourseData.length !== 0 ||\n      wordEntered.length === 0 ? (\n        <ScrollView\n          style={{\n            width: '100%',\n            height: 'auto',\n            flexDirection: 'column',\n          }}\n        >\n          {/**Professor Result Container**/}\n          {filterType === 'p' &&\n            filteredProfData\n              .slice(0, 10)\n              .sort((a, b) => {\n                return a.overallGPA - b.overallGPA\n              })\n              .map(\n                (value: {\n                  name: string\n                  university: string\n                  overallGPA: string\n                  courses: Course[]\n                  department: string\n                }) => {\n                  return (\n                    <TouchableOpacity\n                      style={[\n                        styles.profResultContainer,\n                        {\n                          shadowColor:\n                            parseFloat(value.overallGPA) > 3.6\n                              ? colors.BLUE\n                              : parseFloat(value.overallGPA) > 3.0\n                              ? colors.GREEN\n                              : parseFloat(value.overallGPA) > 2.4\n                              ? colors.ORANGE\n                              : colors.RED,\n                        },\n                      ]}\n                      onPress={() =>\n                        navigation.navigate('Professor', {\n                          profName: value.name,\n                          courses: value.courses,\n                        })\n                      }\n                      key={undefined}\n                    >\n                      <Text\n                        style={{\n                          padding: 5,\n                          paddingLeft: 15,\n                          color: 'white',\n                          fontSize: 25,\n                          textAlign: 'left',\n                          fontWeight: '500',\n                        }}\n                      >\n                        {value.name}{' '}\n                      </Text>\n                      <Text\n                        style={{\n                          paddingRight: 15,\n                          textAlign: 'right',\n                          fontWeight: '800',\n                          fontSize: 25,\n                          color:\n                            parseFloat(value.overallGPA) > 3.6\n                              ? colors.BLUE\n                              : parseFloat(value.overallGPA) > 3.0\n                              ? colors.GREEN\n                              : parseFloat(value.overallGPA) > 2.4\n                              ? colors.ORANGE\n                              : colors.RED,\n                        }}\n                      >\n                        {parseFloat(value.overallGPA).toFixed(2)}\n                      </Text>\n                      {/*<Text\n                        style={{\n                          marginTop: -6,\n                          paddingBottom: 3,\n                          color: 'white',\n                          textAlign: 'center',\n                          fontSize: 18,\n                          opacity: 0.85,\n                        }}\n                      >\n                        {value.university}{' '}\n                      </Text>*/}\n                    </TouchableOpacity>\n                  )\n                }\n              )}\n\n          {/**Courses Result Container**/}\n          {filterType === 'c' &&\n            filteredCourseData\n              .sort()\n              .slice(0, 10)\n              .map((value: string) => {\n                return (\n                  <TouchableOpacity\n                    style={[styles.courseResultContainer]}\n                    onPress={() =>\n                      navigation.navigate('Courses', {\n                        courseName: value,\n                      })\n                    }\n                    key={undefined}\n                  >\n                    <Text\n                      style={{\n                        padding: 5,\n                        paddingLeft: 15,\n                        color: 'white',\n                        fontSize: 25,\n                        textAlign: 'left',\n                        fontWeight: '500',\n                      }}\n                    >\n                      {value}\n                    </Text>\n                  </TouchableOpacity>\n                )\n              })}\n        </ScrollView>\n      ) : (\n        <View\n          style={{\n            width: '100%',\n            height: '5%',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <Text style={{ color: 'white', fontSize: 15 }}>Loading ...</Text>\n        </View>\n      )}\n    </SafeAreaView>\n  )\n}\n\n//Styles - NOTE(Need to be converted into inline)\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    flexDirection: 'column',\n    height: '88%',\n    backgroundColor: 'black',\n    width: '100%',\n  },\n  title: {\n    fontSize: 35,\n    textAlign: 'left',\n    flex: 3,\n    fontWeight: '700',\n    color: 'white',\n  },\n  nav: {\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    paddingHorizontal: 0,\n    paddingBottom: 15,\n    marginTop: 8,\n    color: 'white',\n  },\n  username: {\n    flex: 3,\n    textAlign: 'right',\n    paddingRight: 10,\n    fontSize: 25,\n    color: 'white',\n  },\n  inputStyles: {\n    borderWidth: 2,\n    borderRightWidth: 0,\n    borderLeftWidth: 0,\n    padding: 10,\n    paddingLeft: 30,\n    fontSize: 15,\n  },\n  profResultContainer: {\n    backgroundColor: 'black',\n    width: '100%',\n    flexDirection: 'row',\n    padding: 5,\n    paddingVertical: 8,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  courseResultContainer: {\n    borderRadius: 15,\n    backgroundColor: 'black',\n    width: '100%',\n    flexDirection: 'column',\n    padding: 5,\n    marginVertical: 6,\n    shadowOffset: { width: 4, height: 3 },\n    shadowOpacity: 1,\n    shadowRadius: 0,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}