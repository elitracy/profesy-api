{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport React from 'react';\nimport { Icon } from 'react-native-elements';\nimport { colors } from \"../assets/colors\";\nimport { useState } from 'react';\nimport { LineChart } from 'react-native-svg-charts';\nimport { Circle } from 'react-native-svg';\nimport * as shape from 'd3-shape';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function Course(Props) {\n  var semesterInfo = Props.route.params.courses;\n  var semesterGPAs = semesterInfo.map(function (s) {\n    return parseFloat(s.semGPA);\n  });\n  var courseAvg = semesterGPAs.reduce(function (total, next) {\n    return total + next;\n  }, 0) / semesterGPAs.length;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      filteredData = _useState2[0],\n      setFilteredData = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      wordEntered = _useState4[0],\n      setWordEntered = _useState4[1];\n\n  var _useState5 = useState(colors.PURPLE),\n      _useState6 = _slicedToArray(_useState5, 2),\n      searchBG = _useState6[0],\n      setSearchBG = _useState6[1];\n\n  var _useState7 = useState(semesterInfo[0]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentSemester = _useState8[0],\n      setCurrentSemester = _useState8[1];\n\n  var _useState9 = useState([parseInt(currentSemester.A), parseInt(currentSemester.B), parseInt(currentSemester.C), parseInt(currentSemester.F), parseInt(currentSemester.Q)]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      graphData = _useState10[0],\n      setGraphData = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      togglePercentages = _useState12[0],\n      setTogglePercentages = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      selectedNode = _useState14[0],\n      setSelectedNode = _useState14[1];\n\n  var handleSearch = function handleSearch(text) {\n    var searchWord = text;\n    setWordEntered(searchWord);\n    var newFilter = semesterInfo.filter(function (value) {\n      return value.semester.toLowerCase().includes(searchWord.toLowerCase());\n    });\n\n    if (searchWord === undefined) {\n      setFilteredData(semesterInfo.map(function (info) {\n        return info.semester;\n      }));\n    } else {\n      setFilteredData(newFilter);\n    }\n  };\n\n  function Decorator(_ref) {\n    var x = _ref.x,\n        y = _ref.y,\n        data = _ref.data;\n    return data.map(function (value, index) {\n      return _jsx(Circle, {\n        cx: x(index),\n        cy: y(value),\n        r: 8.5,\n        stroke: 'rgb(134, 65, 244)',\n        strokeWidth: 3,\n        fill: selectedNode === index ? 'rgb(134, 65, 244)' : 'white',\n        onPress: function onPress() {\n          setCurrentSemester(semesterInfo.find(function (s) {\n            return parseFloat(s.semGPA) === value;\n          }));\n          setSelectedNode(index);\n        }\n      }, index);\n    });\n  }\n\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.courseTitle,\n      children: _jsxs(Text, {\n        style: {\n          fontSize: 40,\n          paddingHorizontal: 30,\n          paddingVertical: 10,\n          color: 'white',\n          fontWeight: '500'\n        },\n        children: [Props.route.params.courseName.substring(0, 4), _jsx(Text, {\n          style: {\n            fontWeight: '300'\n          },\n          children: Props.route.params.courseName.substring(4, 7)\n        }), _jsxs(Text, {\n          style: {\n            fontSize: 20,\n            opacity: 0.75,\n            paddingBottom: 2\n          },\n          children: [' ', Props.route.params.profName]\n        })]\n      })\n    }), _jsxs(View, {\n      style: {\n        marginTop: 10,\n        width: '70%',\n        alignItems: 'center'\n      },\n      children: [_jsxs(View, {\n        style: {\n          flexDirection: 'row',\n          width: '100%',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: [_jsx(Icon, {\n          name: \"search\",\n          style: {\n            opacity: 0.7\n          },\n          tvParallaxProperties: null\n        }), _jsx(TextInput, {\n          onChangeText: handleSearch,\n          onFocus: function onFocus() {\n            setSearchBG(colors.GREEN);\n            handleSearch('');\n          },\n          onBlur: function onBlur() {\n            return setSearchBG(colors.PURPLE);\n          },\n          value: wordEntered,\n          placeholder: \"search by semester\",\n          style: [styles.inputStyles, {\n            borderColor: searchBG,\n            paddingLeft: 30\n          }]\n        })]\n      }), filteredData.length != 0 && _jsx(ScrollView, {\n        style: {\n          width: '105%',\n          paddingHorizontal: 0,\n          flexDirection: 'column',\n          height: '40%',\n          position: 'absolute',\n          top: '16%',\n          zIndex: 3,\n          borderRadius: 10\n        },\n        children: filteredData.slice(0, 15).map(function (value, key) {\n          return _jsx(TouchableOpacity, {\n            style: styles.resultContainer,\n            onPress: function onPress() {\n              setCurrentSemester(value);\n              setWordEntered(value.semester);\n              setFilteredData([]);\n              setGraphData([parseInt(currentSemester.A), parseInt(currentSemester.B), parseInt(currentSemester.C), parseInt(currentSemester.F), parseInt(currentSemester.Q)]);\n              Keyboard.dismiss();\n            },\n            children: _jsx(Text, {\n              style: styles.result,\n              children: value.semester\n            })\n          }, undefined);\n        })\n      }), _jsx(Text, {\n        style: {\n          fontSize: 25,\n          textAlign: 'center',\n          marginVertical: 15\n        },\n        children: _jsxs(Text, {\n          style: {\n            textAlign: 'center',\n            fontSize: 20,\n            opacity: 0.6,\n            letterSpacing: -1\n          },\n          children: [' ', currentSemester.semester.length > 0 ? currentSemester.semester : 'N/A']\n        })\n      }), _jsx(View, {\n        style: {\n          width: '60%',\n          padding: 10,\n          borderRadius: 10,\n          shadowColor: colors.GRAY,\n          shadowOpacity: 1,\n          shadowOffset: {\n            width: 1,\n            height: 2\n          },\n          shadowRadius: 1,\n          backgroundColor: parseFloat(currentSemester.semGPA).toFixed(2) >= 3.5 ? colors.BLUE : parseFloat(currentSemester.semGPA).toFixed(2) >= 3.0 ? colors.GREEN : parseFloat(currentSemester.semGPA).toFixed(2) >= 2.5 ? colors.ORANGE : colors.RED\n        },\n        children: _jsxs(Text, {\n          style: {\n            fontSize: 30,\n            textAlign: 'center',\n            color: 'white',\n            fontWeight: '700'\n          },\n          children: [_jsx(Text, {\n            style: {\n              fontWeight: '400',\n              opacity: 0.8\n            },\n            children: \"GPA \"\n          }), parseFloat(currentSemester.semGPA).toFixed(2)]\n        })\n      }), _jsxs(View, {\n        style: {\n          flexDirection: 'column',\n          alignItems: 'center',\n          marginTop: 15,\n          paddingHorizontal: 12,\n          width: '120%',\n          paddingBottom: 15,\n          borderBottomWidth: 0.3,\n          borderBottomColor: colors.GREY\n        },\n        children: [_jsx(Text, {\n          style: {\n            fontSize: 30,\n            fontWeight: '300'\n          },\n          children: \"Grade Distribution\"\n        }), _jsx(View, {\n          style: {\n            flexDirection: 'row',\n            justifyContent: 'flex-start',\n            marginTop: 15,\n            alignItems: 'center'\n          },\n          children: ['A', 'B', 'C', 'F', 'Q'].map(function (letter) {\n            var letterPercentage = parseFloat(currentSemester[letter] / currentSemester.CourseTotal * 100 .toFixed(0));\n            return _jsx(TouchableOpacity, {\n              style: [styles.distLetter, styles[\"dist\" + letter], {\n                flex: letterPercentage < 5 ? 0.06 : letterPercentage / 100\n              }],\n              onPress: function onPress() {\n                return setTogglePercentages(!togglePercentages);\n              },\n              children: _jsx(Text, {\n                style: [{\n                  marginLeft: -16,\n                  fontWeight: '700'\n                }, togglePercentages && {\n                  fontWeight: '400'\n                }],\n                children: togglePercentages ? letterPercentage.toFixed(0) + \"%\" : letter\n              })\n            }, undefined);\n          })\n        })]\n      })]\n    }), _jsxs(View, {\n      style: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '60%',\n        marginTop: 15,\n        padding: 10,\n        borderRadius: 10,\n        shadowColor: colors.GRAY,\n        shadowOpacity: 1,\n        shadowOffset: {\n          width: 1,\n          height: 2\n        },\n        shadowRadius: 1,\n        backgroundColor: parseFloat(courseAvg.toFixed(2)) >= 3.5 ? colors.BLUE : parseFloat(courseAvg.toFixed(2)) >= 3.0 ? colors.GREEN : parseFloat(courseAvg.toFixed(2)) >= 2.5 ? colors.ORANGE : colors.RED\n      },\n      children: [_jsx(Text, {\n        style: {\n          fontSize: 20,\n          color: 'white',\n          marginRight: 10,\n          opacity: 0.8\n        },\n        children: \"Course Average\"\n      }), _jsx(Text, {\n        style: {\n          fontSize: 25,\n          textAlign: 'center',\n          color: 'white',\n          fontWeight: '500'\n        },\n        children: courseAvg.toFixed(2)\n      })]\n    }), _jsx(LineChart, {\n      data: semesterGPAs,\n      style: {\n        height: 200,\n        width: '90%',\n        zIndex: 1\n      },\n      svg: {\n        strokeWidth: 3,\n        stroke: parseFloat(courseAvg).toFixed(2) >= 3.5 ? colors.BLUE : parseFloat(courseAvg).toFixed(2) >= 3.0 ? colors.GREEN : parseFloat(courseAvg).toFixed(2) >= 2.5 ? colors.ORANGE : colors.RED\n      },\n      contentInset: {\n        top: 30,\n        bottom: 20,\n        left: 25,\n        right: 25\n      },\n      curve: shape.curveCatmullRom,\n      children: _jsx(Decorator, {})\n    }), _jsx(TouchableOpacity, {\n      style: {\n        zIndex: -1,\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n        height: '100%',\n        width: '50%'\n      },\n      onPress: function onPress() {\n        setSelectedNode(selectedNode === semesterInfo.length - 1 ? 0 : selectedNode + 1);\n        setCurrentSemester(selectedNode + 1 === semesterInfo.length ? semesterInfo[0] : semesterInfo[selectedNode + 1]);\n      }\n    }), _jsx(TouchableOpacity, {\n      style: {\n        zIndex: -1,\n        position: 'absolute',\n        bottom: 0,\n        left: 0,\n        height: '100%',\n        width: '50%'\n      },\n      onPress: function onPress() {\n        setSelectedNode(selectedNode === 0 ? semesterInfo.length - 1 : selectedNode - 1);\n        setCurrentSemester(selectedNode - 1 === -1 ? semesterInfo[semesterInfo.length - 1] : semesterInfo[selectedNode - 1]);\n      }\n    }), _jsx(View, {\n      style: {\n        width: '80%',\n        height: 40,\n        borderBottomWidth: 0.3\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    alignItems: 'center'\n  },\n  courseTitle: {\n    backgroundColor: colors.GREEN,\n    borderRadius: 10,\n    marginTop: 10,\n    shadowColor: colors.PURPLE,\n    shadowOffset: {\n      width: 2,\n      height: 2\n    },\n    shadowRadius: 1,\n    shadowOpacity: 1,\n    width: '90%'\n  },\n  resultContainer: {\n    backgroundColor: colors.GRAY,\n    padding: 8,\n    width: '100%',\n    marginLeft: -4,\n    borderWidth: 0.3,\n    borderColor: 'white',\n    borderRadius: 10\n  },\n  result: {\n    color: 'white',\n    fontSize: 15,\n    padding: 10,\n    paddingVertical: 5,\n    paddingLeft: 4,\n    fontWeight: '500',\n    letterSpacing: 0.5\n  },\n  inputStyles: {\n    borderWidth: 2,\n    borderRadius: 5,\n    padding: 10,\n    fontSize: 15,\n    flex: 5,\n    marginLeft: -30\n  },\n  distLetter: {\n    paddingVertical: 8,\n    paddingLeft: 16,\n    borderWidth: 2,\n    borderRadius: 15,\n    alignItems: 'center'\n  },\n  distA: {\n    backgroundColor: colors.BLUE,\n    borderBottomRightRadius: 0,\n    borderTopRightRadius: 0\n  },\n  distB: {\n    backgroundColor: colors.GREEN,\n    borderRadius: 0,\n    borderRightWidth: 2,\n    borderLeftWidth: 0\n  },\n  distC: {\n    backgroundColor: colors.ORANGE,\n    borderRadius: 0,\n    borderRightWidth: 2,\n    borderLeftWidth: 0\n  },\n  distF: {\n    backgroundColor: colors.RED,\n    borderRadius: 0,\n    borderRightWidth: 2,\n    borderLeftWidth: 0\n  },\n  distQ: {\n    backgroundColor: colors.PURPLE,\n    borderBottomLeftRadius: 0,\n    borderTopLeftRadius: 0,\n    borderLeftWidth: 0\n  }\n});","map":{"version":3,"sources":["/Users/elitracy/Documents/Coding/Projects/Profesy/public/components/Course.tsx"],"names":["React","Icon","colors","useState","LineChart","Circle","shape","Course","Props","semesterInfo","route","params","courses","semesterGPAs","map","s","parseFloat","semGPA","courseAvg","reduce","total","next","length","filteredData","setFilteredData","wordEntered","setWordEntered","PURPLE","searchBG","setSearchBG","currentSemester","setCurrentSemester","parseInt","A","B","C","F","Q","graphData","setGraphData","togglePercentages","setTogglePercentages","selectedNode","setSelectedNode","handleSearch","text","searchWord","newFilter","filter","value","semester","toLowerCase","includes","undefined","info","Decorator","x","y","data","index","find","styles","container","courseTitle","fontSize","paddingHorizontal","paddingVertical","color","fontWeight","courseName","substring","opacity","paddingBottom","profName","marginTop","width","alignItems","flexDirection","justifyContent","GREEN","inputStyles","borderColor","paddingLeft","height","position","top","zIndex","borderRadius","slice","key","resultContainer","Keyboard","dismiss","result","textAlign","marginVertical","letterSpacing","padding","shadowColor","GRAY","shadowOpacity","shadowOffset","shadowRadius","backgroundColor","toFixed","BLUE","ORANGE","RED","borderBottomWidth","borderBottomColor","GREY","letter","letterPercentage","CourseTotal","distLetter","flex","marginLeft","marginRight","strokeWidth","stroke","bottom","left","right","curveCatmullRom","StyleSheet","create","borderWidth","distA","borderBottomRightRadius","borderTopRightRadius","distB","borderRightWidth","borderLeftWidth","distC","distF","distQ","borderBottomLeftRadius","borderTopLeftRadius"],"mappings":"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","sourcesContent":["//IMPORTS\nimport {\n  View,\n  SafeAreaView,\n  Keyboard,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n} from 'react-native'\nimport React from 'react'\nimport { Icon } from 'react-native-elements'\nimport { colors } from '../assets/colors'\nimport { RootStackParamList, Course as CourseType } from '../RootStackParams'\nimport { useState } from 'react'\nimport { LineChart } from 'react-native-svg-charts'\nimport { G, Text as SVGText, Circle } from 'react-native-svg'\nimport * as shape from 'd3-shape'\n\ninterface Props {\n  route: {\n    params: {\n      course: string\n      prof: string\n    }\n  }\n}\n\nfunction sortCourses(courses: CourseType[])\n\nexport function Course(Props: Props) {\n  const semesterInfo = Props.route.params.courses\n  const semesterGPAs = semesterInfo.map((s) => {\n    return parseFloat(s.semGPA)\n  })\n  const courseAvg =\n    semesterGPAs.reduce((total, next) => total + next, 0) / semesterGPAs.length\n\n  // SET STATES\n  const [filteredData, setFilteredData] = useState<string[]>([])\n  const [wordEntered, setWordEntered] = useState<any>('')\n\n  const [searchBG, setSearchBG] = useState(colors.PURPLE)\n\n  const [currentSemester, setCurrentSemester] = useState<any>(semesterInfo[0])\n  const [graphData, setGraphData] = useState<number[]>([\n    parseInt(currentSemester.A),\n    parseInt(currentSemester.B),\n    parseInt(currentSemester.C),\n    parseInt(currentSemester.F),\n    parseInt(currentSemester.Q),\n  ])\n  const [togglePercentages, setTogglePercentages] = useState(false)\n  const [selectedNode, setSelectedNode] = useState(0)\n\n  // FZF STRING MATCH\n  // handleSearch - Params(text:string)\n  const handleSearch = (text: string) => {\n    const searchWord = text\n    setWordEntered(searchWord)\n    const newFilter: any = semesterInfo.filter((value) => {\n      return value.semester.toLowerCase().includes(searchWord.toLowerCase())\n    })\n    if (searchWord === undefined) {\n      setFilteredData(semesterInfo.map((info) => info.semester))\n    } else {\n      setFilteredData(newFilter)\n    }\n  }\n\n  // CHART POINTS\n  function Decorator({\n    x,\n    y,\n    data,\n  }: { x: any; y: any; data: number[] } | any): any {\n    return data.map((value: number, index: any) => (\n      <Circle\n        key={index}\n        cx={x(index)}\n        cy={y(value)}\n        r={8.5}\n        stroke={'rgb(134, 65, 244)'}\n        strokeWidth={3}\n        fill={selectedNode === index ? 'rgb(134, 65, 244)' : 'white'}\n        onPress={() => {\n          setCurrentSemester(\n            semesterInfo.find((s) => parseFloat(s.semGPA) === value)\n          )\n          setSelectedNode(index)\n        }}\n      />\n    ))\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {/*HEADER*/}\n      <View style={styles.courseTitle}>\n        <Text\n          style={{\n            fontSize: 40,\n            paddingHorizontal: 30,\n            paddingVertical: 10,\n            color: 'white',\n            fontWeight: '500',\n          }}\n        >\n          {Props.route.params.courseName.substring(0, 4)}\n          <Text style={{ fontWeight: '300' }}>\n            {Props.route.params.courseName.substring(4, 7)}\n          </Text>\n          <Text style={{ fontSize: 20, opacity: 0.75, paddingBottom: 2 }}>\n            {' '}\n            {Props.route.params.profName}\n          </Text>\n        </Text>\n      </View>\n\n      <View style={{ marginTop: 10, width: '70%', alignItems: 'center' }}>\n        {/*SEARCH BAR*/}\n        <View\n          style={{\n            flexDirection: 'row',\n            width: '100%',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Icon\n            name=\"search\"\n            style={{ opacity: 0.7 }}\n            tvParallaxProperties={null}\n          />\n          <TextInput\n            onChangeText={handleSearch}\n            onFocus={() => {\n              setSearchBG(colors.GREEN)\n              handleSearch('')\n            }}\n            onBlur={() => setSearchBG(colors.PURPLE)}\n            value={wordEntered}\n            placeholder=\"search by semester\"\n            style={[\n              styles.inputStyles,\n              { borderColor: searchBG, paddingLeft: 30 },\n            ]}\n          />\n        </View>\n\n        {/*SEMSTER LIST*/}\n        {filteredData.length != 0 && (\n          <ScrollView\n            style={{\n              width: '105%',\n              paddingHorizontal: 0,\n              flexDirection: 'column',\n              height: '40%',\n              position: 'absolute',\n              top: '16%',\n              zIndex: 3,\n              borderRadius: 10,\n            }}\n          >\n            {filteredData.slice(0, 15).map((value: any, key) => {\n              return (\n                <TouchableOpacity\n                  style={styles.resultContainer}\n                  onPress={() => {\n                    setCurrentSemester(value)\n                    setWordEntered(value.semester)\n                    setFilteredData([])\n                    setGraphData([\n                      parseInt(currentSemester.A),\n                      parseInt(currentSemester.B),\n                      parseInt(currentSemester.C),\n                      parseInt(currentSemester.F),\n                      parseInt(currentSemester.Q),\n                    ])\n                    Keyboard.dismiss()\n                  }}\n                  key={undefined}\n                >\n                  <Text style={styles.result}>{value.semester}</Text>\n                </TouchableOpacity>\n              )\n            })}\n          </ScrollView>\n        )}\n\n        {/*SELECTED SEMSTER*/}\n        <Text style={{ fontSize: 25, textAlign: 'center', marginVertical: 15 }}>\n          <Text\n            style={{\n              textAlign: 'center',\n              fontSize: 20,\n              opacity: 0.6,\n              letterSpacing: -1,\n            }}\n          >\n            {' '}\n            {currentSemester.semester.length > 0\n              ? currentSemester.semester\n              : 'N/A'}\n          </Text>\n        </Text>\n\n        {/*GPA*/}\n        <View\n          style={{\n            width: '60%',\n            padding: 10,\n            borderRadius: 10,\n            shadowColor: colors.GRAY,\n            shadowOpacity: 1,\n            shadowOffset: { width: 1, height: 2 },\n            shadowRadius: 1,\n            backgroundColor:\n              parseFloat(currentSemester.semGPA).toFixed(2) >= 3.5\n                ? colors.BLUE\n                : parseFloat(currentSemester.semGPA).toFixed(2) >= 3.0\n                ? colors.GREEN\n                : parseFloat(currentSemester.semGPA).toFixed(2) >= 2.5\n                ? colors.ORANGE\n                : colors.RED,\n          }}\n        >\n          <Text\n            style={{\n              fontSize: 30,\n              textAlign: 'center',\n              color: 'white',\n              fontWeight: '700',\n            }}\n          >\n            <Text style={{ fontWeight: '400', opacity: 0.8 }}>GPA </Text>\n            {parseFloat(currentSemester.semGPA).toFixed(2)}\n          </Text>\n        </View>\n\n        {/*GRADE DISTRIBUTION*/}\n        <View\n          style={{\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginTop: 15,\n            paddingHorizontal: 12,\n            width: '120%',\n            paddingBottom: 15,\n            borderBottomWidth: 0.3,\n            borderBottomColor: colors.GREY,\n          }}\n        >\n          <Text style={{ fontSize: 30, fontWeight: '300' }}>\n            Grade Distribution\n          </Text>\n\n          <View\n            style={{\n              flexDirection: 'row',\n              justifyContent: 'flex-start',\n              marginTop: 15,\n              alignItems: 'center',\n            }}\n          >\n            {['A', 'B', 'C', 'F', 'Q'].map((letter) => {\n              let letterPercentage = parseFloat(\n                (currentSemester[letter] / currentSemester.CourseTotal) *\n                  (100).toFixed(0)\n              )\n\n              return (\n                <TouchableOpacity\n                  style={[\n                    styles.distLetter,\n                    styles[`dist${letter}`],\n                    {\n                      flex:\n                        letterPercentage < 5 ? 0.06 : letterPercentage / 100,\n                    },\n                  ]}\n                  onPress={() => setTogglePercentages(!togglePercentages)}\n                  key={undefined}\n                >\n                  <Text\n                    style={[\n                      { marginLeft: -16, fontWeight: '700' },\n                      togglePercentages && { fontWeight: '400' },\n                    ]}\n                  >\n                    {togglePercentages\n                      ? `${letterPercentage.toFixed(0)}%`\n                      : letter}\n                  </Text>\n                </TouchableOpacity>\n              )\n            })}\n          </View>\n        </View>\n      </View>\n\n      {/*COURSE AVERAGE*/}\n      <View\n        style={{\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'center',\n          width: '60%',\n          marginTop: 15,\n          padding: 10,\n          borderRadius: 10,\n          shadowColor: colors.GRAY,\n          shadowOpacity: 1,\n          shadowOffset: { width: 1, height: 2 },\n          shadowRadius: 1,\n          backgroundColor:\n            parseFloat(courseAvg.toFixed(2)) >= 3.5\n              ? colors.BLUE\n              : parseFloat(courseAvg.toFixed(2)) >= 3.0\n              ? colors.GREEN\n              : parseFloat(courseAvg.toFixed(2)) >= 2.5\n              ? colors.ORANGE\n              : colors.RED,\n        }}\n      >\n        <Text\n          style={{\n            fontSize: 20,\n            color: 'white',\n            marginRight: 10,\n            opacity: 0.8,\n          }}\n        >\n          Course Average\n        </Text>\n        <Text\n          style={{\n            fontSize: 25,\n            textAlign: 'center',\n            color: 'white',\n            fontWeight: '500',\n          }}\n        >\n          {courseAvg.toFixed(2)}\n        </Text>\n      </View>\n\n      {/*DISTRIBUTION GRAPH*/}\n      <LineChart\n        data={semesterGPAs}\n        style={{ height: 200, width: '90%', zIndex: 1 }}\n        svg={{\n          strokeWidth: 3,\n          stroke:\n            parseFloat(courseAvg).toFixed(2) >= 3.5\n              ? colors.BLUE\n              : parseFloat(courseAvg).toFixed(2) >= 3.0\n              ? colors.GREEN\n              : parseFloat(courseAvg).toFixed(2) >= 2.5\n              ? colors.ORANGE\n              : colors.RED,\n        }}\n        contentInset={{ top: 30, bottom: 20, left: 25, right: 25 }}\n        curve={shape.curveCatmullRom}\n      >\n        <Decorator />\n      </LineChart>\n\n      {/*SIDE-SCROLL BUTTONS*/}\n      <TouchableOpacity\n        style={{\n          zIndex: -1,\n          position: 'absolute',\n          bottom: 0,\n          right: 0,\n          height: '100%',\n          width: '50%',\n        }}\n        onPress={() => {\n          setSelectedNode(\n            selectedNode === semesterInfo.length - 1 ? 0 : selectedNode + 1\n          )\n          setCurrentSemester(\n            selectedNode + 1 === semesterInfo.length\n              ? semesterInfo[0]\n              : semesterInfo[selectedNode + 1]\n          )\n        }}\n      />\n      <TouchableOpacity\n        style={{\n          zIndex: -1,\n          // backgroundColor: 'red',\n          position: 'absolute',\n          bottom: 0,\n          left: 0,\n          height: '100%',\n          width: '50%',\n        }}\n        onPress={() => {\n          setSelectedNode(\n            selectedNode === 0 ? semesterInfo.length - 1 : selectedNode - 1\n          )\n          setCurrentSemester(\n            selectedNode - 1 === -1\n              ? semesterInfo[semesterInfo.length - 1]\n              : semesterInfo[selectedNode - 1]\n          )\n        }}\n      />\n\n      <View style={{ width: '80%', height: 40, borderBottomWidth: 0.3 }}></View>\n    </SafeAreaView>\n  )\n}\n\n// STLYES - NOTE: Convert to inline\nconst styles: any = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n  },\n  courseTitle: {\n    backgroundColor: colors.GREEN,\n    borderRadius: 10,\n    marginTop: 10,\n    shadowColor: colors.PURPLE,\n    shadowOffset: { width: 2, height: 2 },\n    shadowRadius: 1,\n    shadowOpacity: 1,\n    width: '90%',\n  },\n  resultContainer: {\n    backgroundColor: colors.GRAY,\n    padding: 8,\n    width: '100%',\n    marginLeft: -4,\n    borderWidth: 0.3,\n    borderColor: 'white',\n    borderRadius: 10,\n  },\n  result: {\n    color: 'white',\n    fontSize: 15,\n    padding: 10,\n    paddingVertical: 5,\n    paddingLeft: 4,\n    fontWeight: '500',\n    letterSpacing: 0.5,\n  },\n  inputStyles: {\n    borderWidth: 2,\n    borderRadius: 5,\n    padding: 10,\n    fontSize: 15,\n    flex: 5,\n    marginLeft: -30,\n  },\n  distLetter: {\n    paddingVertical: 8,\n    paddingLeft: 16,\n    borderWidth: 2,\n    borderRadius: 15,\n    alignItems: 'center',\n  },\n  distA: {\n    backgroundColor: colors.BLUE,\n    borderBottomRightRadius: 0,\n    borderTopRightRadius: 0,\n  },\n  distB: {\n    backgroundColor: colors.GREEN,\n    borderRadius: 0,\n    borderRightWidth: 2,\n    borderLeftWidth: 0,\n  },\n  distC: {\n    backgroundColor: colors.ORANGE,\n    borderRadius: 0,\n    borderRightWidth: 2,\n    borderLeftWidth: 0,\n  },\n  distF: {\n    backgroundColor: colors.RED,\n    borderRadius: 0,\n    borderRightWidth: 2,\n    borderLeftWidth: 0,\n  },\n  distQ: {\n    backgroundColor: colors.PURPLE,\n    borderBottomLeftRadius: 0,\n    borderTopLeftRadius: 0,\n    borderLeftWidth: 0,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}