{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport React from 'react';\nimport { colors } from \"../assets/colors\";\nimport { useState, useEffect } from 'react';\nimport { LineChart } from 'react-native-svg-charts';\nimport { Circle } from 'react-native-svg';\nimport * as shape from 'd3-shape';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar seasons = {\n  SPRING: 3,\n  SUMMER: 2,\n  FALL: 1,\n  WINTER: 0\n};\n\nfunction getSemesters(course, prof, setSemesterInfo, setCurrentSemester) {\n  return _regeneratorRuntime.async(function getSemesters$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/courseAndProf?course=\" + course + \"&prof=\" + prof).then(function (result) {\n            return result.json();\n          }).then(function (result) {\n            var sortedCourses = sortFilterCourses(course, result.message.courses);\n            setSemesterInfo(sortedCourses);\n            setCurrentSemester(sortedCourses[0]);\n            return result;\n          }).catch(function (err) {\n            console.log(err);\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction sortFilterCourses(courseName, courses) {\n  return courses.sort(function (a, b) {\n    var aY = parseInt(a.semester.substring(a.semester.length - 4, a.semester.length));\n    var bY = parseInt(b.semester.substring(b.semester.length - 4, b.semester.length));\n    var aS = a.semester.substring(0, a.semester.length - 5);\n    var bS = b.semester.substring(0, b.semester.length - 5);\n    return aY !== bY ? aY - bY : seasons[bS] - seasons[aS];\n  }).filter(function (c) {\n    return c.course === courseName;\n  });\n}\n\nexport function Course(Props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      semesterInfo = _useState2[0],\n      setSemesterInfo = _useState2[1];\n\n  var semesterGPAs = semesterInfo.map(function (s) {\n    return parseFloat(s.semGPA);\n  });\n  var courseAvg = semesterGPAs.reduce(function (total, next) {\n    return total + next;\n  }, 0) / semesterGPAs.length;\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filteredData = _useState4[0],\n      setFilteredData = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      wordEntered = _useState6[0],\n      setWordEntered = _useState6[1];\n\n  var _useState7 = useState(colors.PURPLE),\n      _useState8 = _slicedToArray(_useState7, 2),\n      searchBG = _useState8[0],\n      setSearchBG = _useState8[1];\n\n  var _useState9 = useState(semesterInfo[0]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      currentSemester = _useState10[0],\n      setCurrentSemester = _useState10[1];\n\n  var _useState11 = useState(currentSemester !== undefined ? [parseInt(currentSemester.A), parseInt(currentSemester.B), parseInt(currentSemester.C), parseInt(currentSemester.F), parseInt(currentSemester.Q)] : []),\n      _useState12 = _slicedToArray(_useState11, 2),\n      graphData = _useState12[0],\n      setGraphData = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      togglePercentages = _useState14[0],\n      setTogglePercentages = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      selectedNode = _useState16[0],\n      setSelectedNode = _useState16[1];\n\n  useEffect(function () {\n    getSemesters(Props.route.params.course, Props.route.params.prof, setSemesterInfo, setCurrentSemester);\n  }, []);\n\n  var handleSearch = function handleSearch(text) {\n    var searchWord = text;\n    setWordEntered(searchWord);\n    var newFilter = semesterInfo.filter(function (value) {\n      return value.semester.toLowerCase().includes(searchWord.toLowerCase());\n    });\n\n    if (searchWord === undefined) {\n      setFilteredData(semesterInfo.map(function (info) {\n        return info.semester;\n      }));\n    } else {\n      setFilteredData(newFilter);\n    }\n  };\n\n  function Decorator(_ref) {\n    var x = _ref.x,\n        y = _ref.y,\n        data = _ref.data;\n    return data.map(function (value, index) {\n      return _jsx(Circle, {\n        cx: x(index),\n        cy: y(value),\n        r: 8.5,\n        stroke: colors.GREEN,\n        strokeWidth: 3,\n        fill: selectedNode === index ? colors.GREEN : 'black',\n        onPress: function onPress() {\n          setCurrentSemester(semesterInfo.find(function (s) {\n            return parseFloat(s.semGPA) === value;\n          }));\n          setSelectedNode(index);\n        }\n      }, index);\n    });\n  }\n\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.courseTitle,\n      children: _jsxs(Text, {\n        style: {\n          fontSize: 40,\n          paddingHorizontal: 10,\n          paddingVertical: 5,\n          color: 'white',\n          fontWeight: '500'\n        },\n        children: [Props.route.params.course.substring(0, 4), _jsx(Text, {\n          style: {\n            fontWeight: '300'\n          },\n          children: Props.route.params.course.substring(4, 7)\n        }), _jsxs(Text, {\n          style: {\n            fontSize: 20,\n            fontWeight: '300',\n            paddingBottom: 2\n          },\n          children: [' \\n', Props.route.params.prof]\n        })]\n      })\n    }), currentSemester !== undefined ? _jsxs(View, {\n      style: {\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [_jsxs(View, {\n        style: {\n          width: '90%',\n          alignItems: 'center'\n        },\n        children: [_jsx(View, {\n          style: {\n            flexDirection: 'row',\n            width: '100%',\n            alignItems: 'center',\n            justifyContent: 'center'\n          },\n          children: _jsx(TextInput, {\n            onChangeText: handleSearch,\n            onFocus: function onFocus() {\n              setSearchBG(colors.GREEN);\n              handleSearch('');\n            },\n            onBlur: function onBlur() {\n              return setSearchBG(colors.PURPLE);\n            },\n            value: wordEntered,\n            placeholder: \"search by semester\",\n            style: [styles.inputStyles, {\n              display: 'none'\n            }]\n          })\n        }), false && filteredData.length != 0 && _jsx(ScrollView, {\n          style: {\n            width: '100%',\n            paddingHorizontal: 0,\n            flexDirection: 'column',\n            height: '40%',\n            position: 'absolute',\n            top: '16%',\n            zIndex: 3,\n            borderRadius: 5\n          },\n          children: filteredData.slice(0, 15).map(function (value, key) {\n            return _jsx(TouchableOpacity, {\n              style: styles.resultContainer,\n              onPress: function onPress() {\n                setCurrentSemester(value);\n                setWordEntered(value.semester);\n                setFilteredData([]);\n                setGraphData([parseInt(currentSemester.A), parseInt(currentSemester.B), parseInt(currentSemester.C), parseInt(currentSemester.F), parseInt(currentSemester.Q)]);\n                Keyboard.dismiss();\n              },\n              children: _jsx(Text, {\n                style: styles.result,\n                children: value.semester\n              })\n            }, undefined);\n          })\n        }), _jsxs(View, {\n          style: {\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'center',\n            width: '100%',\n            marginTop: 5,\n            padding: 10,\n            borderRadius: 10,\n            borderWidth: 2,\n            borderColor: parseFloat(courseAvg.toFixed(2)) >= 3.5 ? colors.BLUE : parseFloat(courseAvg.toFixed(2)) >= 3.0 ? colors.GREEN : parseFloat(courseAvg.toFixed(2)) >= 2.5 ? colors.ORANGE : colors.RED\n          },\n          children: [_jsx(Text, {\n            style: {\n              fontSize: 30,\n              color: 'white',\n              marginRight: 10,\n              fontWeight: '400'\n            },\n            children: \"Course Average\"\n          }), _jsx(Text, {\n            style: {\n              fontSize: 35,\n              textAlign: 'center',\n              color: 'white',\n              fontWeight: '700'\n            },\n            children: courseAvg.toFixed(2)\n          })]\n        }), _jsxs(View, {\n          style: {\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginVertical: 30,\n            paddingHorizontal: 10,\n            width: '100%',\n            padding: 20,\n            borderWidth: 2,\n            borderColor: 'white',\n            borderRadius: 10\n          },\n          children: [_jsx(Text, {\n            style: {\n              fontSize: 30,\n              fontWeight: '300',\n              color: 'white'\n            },\n            children: \"Grade Distribution\"\n          }), _jsx(View, {\n            style: {\n              flexDirection: 'row',\n              justifyContent: 'flex-start',\n              marginTop: 15,\n              alignItems: 'center'\n            },\n            children: currentSemester.semester !== 'none' && ['A', 'B', 'C', 'F', 'Q'].map(function (letter) {\n              var letterPercentage = parseFloat(currentSemester[letter] / currentSemester.CourseTotal * 100 .toFixed(0));\n              return _jsx(Pressable, {\n                style: [styles.distLetter, styles[\"dist\" + letter], {\n                  flex: letterPercentage < 5 ? 0.08 : letterPercentage / 100\n                }],\n                onPress: function onPress() {\n                  return setTogglePercentages(!togglePercentages);\n                },\n                children: _jsx(Text, {\n                  style: [{\n                    marginLeft: -16,\n                    fontWeight: '700'\n                  }, togglePercentages && {\n                    fontWeight: '400'\n                  }],\n                  children: togglePercentages ? letterPercentage.toFixed(0) + \"%\" : letter\n                })\n              }, undefined);\n            })\n          })]\n        })]\n      }), _jsx(LineChart, {\n        data: semesterGPAs,\n        style: {\n          height: 250,\n          width: '95%',\n          zIndex: 1\n        },\n        svg: {\n          strokeWidth: 3,\n          stroke: parseFloat(courseAvg).toFixed(2) >= 3.5 ? colors.BLUE : parseFloat(courseAvg).toFixed(2) >= 3.0 ? colors.GREEN : parseFloat(courseAvg).toFixed(2) >= 2.5 ? colors.ORANGE : colors.RED\n        },\n        contentInset: {\n          top: 30,\n          bottom: 20,\n          left: 25,\n          right: 25\n        },\n        curve: shape.curveCatmullRom,\n        children: _jsx(Decorator, {})\n      }), _jsx(View, {\n        style: {\n          width: '60%',\n          padding: 10,\n          borderRadius: 10,\n          borderWidth: 2,\n          marginTop: 40,\n          borderColor: parseFloat(currentSemester.semGPA).toFixed(2) >= 3.5 ? colors.BLUE : parseFloat(currentSemester.semGPA).toFixed(2) >= 3.0 ? colors.GREEN : parseFloat(currentSemester.semGPA).toFixed(2) >= 2.5 ? colors.ORANGE : colors.RED\n        },\n        children: _jsxs(Text, {\n          style: {\n            fontSize: 30,\n            textAlign: 'center',\n            color: 'white',\n            fontWeight: '700'\n          },\n          children: [_jsx(Text, {\n            style: {\n              fontWeight: '400'\n            },\n            children: \"GPA \"\n          }), parseFloat(currentSemester.semGPA).toFixed(2)]\n        })\n      }), _jsxs(Text, {\n        style: {\n          textAlign: 'left',\n          fontSize: 25,\n          color: 'white',\n          marginTop: 5\n        },\n        children: [' ', currentSemester.semester.length > 0 ? currentSemester.semester : 'N/A']\n      }), _jsx(Pressable, {\n        style: {\n          zIndex: -1,\n          position: 'absolute',\n          bottom: 0,\n          right: 0,\n          height: '100%',\n          width: '50%'\n        },\n        onPress: function onPress() {\n          setSelectedNode(selectedNode === semesterInfo.length - 1 ? 0 : selectedNode + 1);\n          setCurrentSemester(selectedNode + 1 === semesterInfo.length ? semesterInfo[0] : semesterInfo[selectedNode + 1]);\n        }\n      }), _jsx(Pressable, {\n        style: {\n          zIndex: 1,\n          position: 'absolute',\n          bottom: 0,\n          left: 0,\n          height: '100%',\n          width: '50%'\n        },\n        onPress: function onPress() {\n          setSelectedNode(selectedNode === 0 ? semesterInfo.length - 1 : selectedNode - 1);\n          setCurrentSemester(selectedNode - 1 === -1 ? semesterInfo[semesterInfo.length - 1] : semesterInfo[selectedNode - 1]);\n        }\n      }), _jsx(View, {\n        style: {\n          width: '80%',\n          height: 40,\n          borderBottomWidth: 0.3\n        }\n      })]\n    }) : _jsx(View, {\n      style: {\n        width: '100%',\n        height: '20%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(Text, {\n        style: {\n          color: colors.GREY,\n          fontSize: 20\n        },\n        children: \"Loading ...\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    backgroundColor: 'black'\n  },\n  courseTitle: {\n    borderRadius: 5,\n    marginTop: 5,\n    width: '90%',\n    textAlign: 'left'\n  },\n  resultContainer: {\n    backgroundColor: 'black',\n    padding: 8,\n    width: '100%',\n    borderWidth: 0.3,\n    borderColor: 'white'\n  },\n  result: {\n    color: 'white',\n    fontSize: 15,\n    padding: 5,\n    fontWeight: '700'\n  },\n  inputStyles: {\n    borderWidth: 2,\n    borderRadius: 5,\n    padding: 10,\n    fontSize: 15,\n    flex: 5,\n    backgroundColor: 'white'\n  },\n  distLetter: {\n    paddingVertical: 8,\n    paddingLeft: 16,\n    borderRadius: 10,\n    alignItems: 'center'\n  },\n  distA: {\n    backgroundColor: colors.BLUE,\n    borderBottomRightRadius: 0,\n    borderTopRightRadius: 0\n  },\n  distB: {\n    backgroundColor: colors.GREEN,\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  distC: {\n    backgroundColor: colors.ORANGE,\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  distF: {\n    backgroundColor: colors.RED,\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  distQ: {\n    backgroundColor: colors.PURPLE,\n    borderBottomLeftRadius: 0,\n    borderTopLeftRadius: 0,\n    borderLeftWidth: 0\n  }\n});","map":{"version":3,"sources":["/Users/elitracy/Documents/Coding/Projects/Profesy/public/components/Course.tsx"],"names":["React","colors","useState","useEffect","LineChart","Circle","shape","seasons","SPRING","SUMMER","FALL","WINTER","getSemesters","course","prof","setSemesterInfo","setCurrentSemester","fetch","then","result","json","sortedCourses","sortFilterCourses","message","courses","catch","err","console","log","courseName","sort","a","b","aY","parseInt","semester","substring","length","bY","aS","bS","filter","c","Course","Props","semesterInfo","semesterGPAs","map","s","parseFloat","semGPA","courseAvg","reduce","total","next","filteredData","setFilteredData","wordEntered","setWordEntered","PURPLE","searchBG","setSearchBG","currentSemester","undefined","A","B","C","F","Q","graphData","setGraphData","togglePercentages","setTogglePercentages","selectedNode","setSelectedNode","route","params","handleSearch","text","searchWord","newFilter","value","toLowerCase","includes","info","Decorator","x","y","data","index","GREEN","find","styles","container","courseTitle","fontSize","paddingHorizontal","paddingVertical","color","fontWeight","paddingBottom","width","display","flexDirection","alignItems","justifyContent","inputStyles","height","position","top","zIndex","borderRadius","slice","key","resultContainer","Keyboard","dismiss","marginTop","padding","borderWidth","borderColor","toFixed","BLUE","ORANGE","RED","marginRight","textAlign","marginVertical","letter","letterPercentage","CourseTotal","distLetter","flex","marginLeft","strokeWidth","stroke","bottom","left","right","curveCatmullRom","borderBottomWidth","GREY","StyleSheet","create","backgroundColor","paddingLeft","distA","borderBottomRightRadius","borderTopRightRadius","distB","borderLeftWidth","distC","distF","distQ","borderBottomLeftRadius","borderTopLeftRadius"],"mappings":"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","sourcesContent":["//IMPORTS\nimport {\n  View,\n  SafeAreaView,\n  Keyboard,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  Pressable,\n  ScrollView,\n} from 'react-native'\nimport React from 'react'\nimport { colors } from '../assets/colors'\nimport { RootStackParamList, Course as CourseType } from '../RootStackParams'\nimport { useState, useEffect } from 'react'\nimport { LineChart } from 'react-native-svg-charts'\nimport { G, Text as SVGText, Circle } from 'react-native-svg'\nimport * as shape from 'd3-shape'\n\ninterface Props {\n  route: {\n    params: {\n      course: string\n      prof: string\n    }\n  }\n}\n\n// Seasons object for sorting\nconst seasons: {\n  SPRING: number\n  SUMMER: number\n  FALL: number\n  WINTER: number\n} = {\n  SPRING: 3,\n  SUMMER: 2,\n  FALL: 1,\n  WINTER: 0,\n}\n\nasync function getSemesters(\n  course: string,\n  prof: string,\n  setSemesterInfo: Function,\n  setCurrentSemester: Function\n): Promise<any> {\n  return await fetch(\n    `http://localhost:8080/courseAndProf?course=${course}&prof=${prof}`\n  )\n    .then((result) => result.json())\n    .then((result) => {\n      let sortedCourses = sortFilterCourses(course, result.message.courses)\n      setSemesterInfo(sortedCourses)\n      setCurrentSemester(sortedCourses[0])\n      return result\n    })\n    .catch((err) => {\n      console.log(err)\n    })\n}\n\nfunction sortFilterCourses(courseName: string, courses: CourseType[]) {\n  return courses\n    .sort((a, b) => {\n      const aY = parseInt(\n        a.semester.substring(a.semester.length - 4, a.semester.length)\n      )\n      const bY = parseInt(\n        b.semester.substring(b.semester.length - 4, b.semester.length)\n      )\n      const aS = a.semester.substring(0, a.semester.length - 5)\n      const bS = b.semester.substring(0, b.semester.length - 5)\n      return aY !== bY ? aY - bY : seasons[bS] - seasons[aS]\n    })\n    .filter((c: CourseType) => {\n      return c.course === courseName\n    })\n}\n\nexport function Course(Props: Props) {\n  // const semesterInfo = Props.route.params.courses\n  const [semesterInfo, setSemesterInfo] = useState([])\n  const semesterGPAs = semesterInfo.map((s) => {\n    return parseFloat(s.semGPA)\n  })\n  const courseAvg =\n    semesterGPAs.reduce((total, next) => total + next, 0) / semesterGPAs.length\n\n  // SET STATES\n  const [filteredData, setFilteredData] = useState<string[]>([])\n  const [wordEntered, setWordEntered] = useState<any>('')\n  const [searchBG, setSearchBG] = useState(colors.PURPLE)\n  const [currentSemester, setCurrentSemester] = useState<any>(semesterInfo[0])\n  const [graphData, setGraphData] = useState<number[]>(\n    currentSemester !== undefined\n      ? [\n          parseInt(currentSemester.A),\n          parseInt(currentSemester.B),\n          parseInt(currentSemester.C),\n          parseInt(currentSemester.F),\n          parseInt(currentSemester.Q),\n        ]\n      : []\n  )\n  const [togglePercentages, setTogglePercentages] = useState(false)\n  const [selectedNode, setSelectedNode] = useState(0)\n  useEffect((): Promise<any> => {\n    getSemesters(\n      Props.route.params.course,\n      Props.route.params.prof,\n      setSemesterInfo,\n      setCurrentSemester\n    )\n  }, [])\n\n  // FZF STRING MATCH\n  // handleSearch - Params(text:string)\n  const handleSearch = (text: string) => {\n    const searchWord = text\n    setWordEntered(searchWord)\n    const newFilter: any = semesterInfo.filter((value: CourseType) => {\n      return value.semester.toLowerCase().includes(searchWord.toLowerCase())\n    })\n    if (searchWord === undefined) {\n      setFilteredData(semesterInfo.map((info: CourseType) => info.semester))\n    } else {\n      setFilteredData(newFilter)\n    }\n  }\n\n  // CHART POINTS\n  function Decorator({\n    x,\n    y,\n    data,\n  }: { x: any; y: any; data: number[] } | any): any {\n    return data.map((value: number, index: any) => (\n      <Circle\n        key={index}\n        cx={x(index)}\n        cy={y(value)}\n        r={8.5}\n        // stroke={'rgb(134, 65, 244)'}\n        stroke={colors.GREEN}\n        strokeWidth={3}\n        // fill={selectedNode === index ? 'rgb(134, 65, 244)' : 'black'}\n        fill={selectedNode === index ? colors.GREEN : 'black'}\n        onPress={() => {\n          setCurrentSemester(\n            semesterInfo.find((s: CourseType) => parseFloat(s.semGPA) === value)\n          )\n          setSelectedNode(index)\n        }}\n      />\n    ))\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {/*HEADER*/}\n      <View style={styles.courseTitle}>\n        <Text\n          style={{\n            fontSize: 40,\n            paddingHorizontal: 10,\n            paddingVertical: 5,\n            color: 'white',\n            fontWeight: '500',\n          }}\n        >\n          {Props.route.params.course.substring(0, 4)}\n          <Text style={{ fontWeight: '300' }}>\n            {Props.route.params.course.substring(4, 7)}\n          </Text>\n          <Text style={{ fontSize: 20, fontWeight: '300', paddingBottom: 2 }}>\n            {' \\n'}\n            {Props.route.params.prof}\n          </Text>\n        </Text>\n      </View>\n\n      {currentSemester !== undefined ? (\n        <View\n          style={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <View style={{ width: '90%', alignItems: 'center' }}>\n            {/*SEARCH BAR*/}\n            <View\n              style={{\n                flexDirection: 'row',\n                width: '100%',\n                alignItems: 'center',\n                justifyContent: 'center',\n              }}\n            >\n              <TextInput\n                onChangeText={handleSearch}\n                onFocus={() => {\n                  setSearchBG(colors.GREEN)\n                  handleSearch('')\n                }}\n                onBlur={() => setSearchBG(colors.PURPLE)}\n                value={wordEntered}\n                placeholder=\"search by semester\"\n                style={[styles.inputStyles, { display: 'none' }]}\n              />\n            </View>\n            {/*SEMSTER LIST*/}\n            {false && filteredData.length != 0 && (\n              <ScrollView\n                style={{\n                  width: '100%',\n                  paddingHorizontal: 0,\n                  flexDirection: 'column',\n                  height: '40%',\n                  position: 'absolute',\n                  top: '16%',\n                  zIndex: 3,\n                  borderRadius: 5,\n                }}\n              >\n                {filteredData.slice(0, 15).map((value: any, key) => {\n                  return (\n                    <TouchableOpacity\n                      style={styles.resultContainer}\n                      onPress={() => {\n                        setCurrentSemester(value)\n                        setWordEntered(value.semester)\n                        setFilteredData([])\n                        setGraphData([\n                          parseInt(currentSemester.A),\n                          parseInt(currentSemester.B),\n                          parseInt(currentSemester.C),\n                          parseInt(currentSemester.F),\n                          parseInt(currentSemester.Q),\n                        ])\n                        Keyboard.dismiss()\n                      }}\n                      key={undefined}\n                    >\n                      <Text style={styles.result}>{value.semester}</Text>\n                    </TouchableOpacity>\n                  )\n                })}\n              </ScrollView>\n            )}\n\n            {/*COURSE AVERAGE*/}\n            <View\n              style={{\n                flexDirection: 'row',\n                alignItems: 'center',\n                justifyContent: 'center',\n                width: '100%',\n                marginTop: 5,\n                padding: 10,\n                borderRadius: 10,\n                borderWidth: 2,\n                borderColor:\n                  parseFloat(courseAvg.toFixed(2)) >= 3.5\n                    ? colors.BLUE\n                    : parseFloat(courseAvg.toFixed(2)) >= 3.0\n                    ? colors.GREEN\n                    : parseFloat(courseAvg.toFixed(2)) >= 2.5\n                    ? colors.ORANGE\n                    : colors.RED,\n              }}\n            >\n              <Text\n                style={{\n                  fontSize: 30,\n                  color: 'white',\n                  marginRight: 10,\n                  fontWeight: '400',\n                }}\n              >\n                Course Average\n              </Text>\n              <Text\n                style={{\n                  fontSize: 35,\n                  textAlign: 'center',\n                  color: 'white',\n                  fontWeight: '700',\n                }}\n              >\n                {courseAvg.toFixed(2)}\n              </Text>\n            </View>\n\n            {/*GRADE DISTRIBUTION*/}\n            <View\n              style={{\n                flexDirection: 'column',\n                alignItems: 'center',\n                marginVertical: 30,\n                paddingHorizontal: 10,\n                width: '100%',\n                padding: 20,\n                // borderBottomWidth: 0.3,\n                // borderBottomColor: colors.GREY,\n                borderWidth: 2,\n                borderColor: 'white',\n                borderRadius: 10,\n              }}\n            >\n              <Text style={{ fontSize: 30, fontWeight: '300', color: 'white' }}>\n                Grade Distribution\n              </Text>\n\n              <View\n                style={{\n                  flexDirection: 'row',\n                  justifyContent: 'flex-start',\n                  marginTop: 15,\n                  alignItems: 'center',\n                }}\n              >\n                {currentSemester.semester !== 'none' &&\n                  ['A', 'B', 'C', 'F', 'Q'].map((letter) => {\n                    let letterPercentage = parseFloat(\n                      (currentSemester[letter] / currentSemester.CourseTotal) *\n                        (100).toFixed(0)\n                    )\n\n                    return (\n                      <Pressable\n                        style={[\n                          styles.distLetter,\n                          styles[`dist${letter}`],\n                          {\n                            flex:\n                              letterPercentage < 5\n                                ? 0.08\n                                : letterPercentage / 100,\n                          },\n                        ]}\n                        onPress={() => setTogglePercentages(!togglePercentages)}\n                        key={undefined}\n                      >\n                        <Text\n                          style={[\n                            { marginLeft: -16, fontWeight: '700' },\n                            togglePercentages && { fontWeight: '400' },\n                          ]}\n                        >\n                          {togglePercentages\n                            ? `${letterPercentage.toFixed(0)}%`\n                            : letter}\n                        </Text>\n                      </Pressable>\n                    )\n                  })}\n              </View>\n            </View>\n          </View>\n\n          {/*DISTRIBUTION GRAPH*/}\n          <LineChart\n            data={semesterGPAs}\n            style={{ height: 250, width: '95%', zIndex: 1 }}\n            svg={{\n              strokeWidth: 3,\n              stroke:\n                parseFloat(courseAvg).toFixed(2) >= 3.5\n                  ? colors.BLUE\n                  : parseFloat(courseAvg).toFixed(2) >= 3.0\n                  ? colors.GREEN\n                  : parseFloat(courseAvg).toFixed(2) >= 2.5\n                  ? colors.ORANGE\n                  : colors.RED,\n            }}\n            contentInset={{ top: 30, bottom: 20, left: 25, right: 25 }}\n            curve={shape.curveCatmullRom}\n          >\n            <Decorator />\n          </LineChart>\n          {/*GPA*/}\n          <View\n            style={{\n              width: '60%',\n              padding: 10,\n              borderRadius: 10,\n              borderWidth: 2,\n              marginTop: 40,\n              borderColor:\n                parseFloat(currentSemester.semGPA).toFixed(2) >= 3.5\n                  ? colors.BLUE\n                  : parseFloat(currentSemester.semGPA).toFixed(2) >= 3.0\n                  ? colors.GREEN\n                  : parseFloat(currentSemester.semGPA).toFixed(2) >= 2.5\n                  ? colors.ORANGE\n                  : colors.RED,\n            }}\n          >\n            <Text\n              style={{\n                fontSize: 30,\n                textAlign: 'center',\n                color: 'white',\n                fontWeight: '700',\n              }}\n            >\n              <Text style={{ fontWeight: '400' }}>GPA </Text>\n              {parseFloat(currentSemester.semGPA).toFixed(2)}\n            </Text>\n          </View>\n\n          {/*SELECTED SEMSTER*/}\n          <Text\n            style={{\n              textAlign: 'left',\n              fontSize: 25,\n              color: 'white',\n              marginTop: 5,\n            }}\n          >\n            {' '}\n            {currentSemester.semester.length > 0\n              ? currentSemester.semester\n              : 'N/A'}\n          </Text>\n\n          {/*SIDE-SCROLL BUTTONS*/}\n          <Pressable\n            style={{\n              zIndex: -1,\n              position: 'absolute',\n              bottom: 0,\n              right: 0,\n              height: '100%',\n              width: '50%',\n            }}\n            onPress={() => {\n              setSelectedNode(\n                selectedNode === semesterInfo.length - 1 ? 0 : selectedNode + 1\n              )\n              setCurrentSemester(\n                selectedNode + 1 === semesterInfo.length\n                  ? semesterInfo[0]\n                  : semesterInfo[selectedNode + 1]\n              )\n            }}\n          />\n          <Pressable\n            style={{\n              zIndex: 1,\n              position: 'absolute',\n              bottom: 0,\n              left: 0,\n              height: '100%',\n              width: '50%',\n            }}\n            onPress={() => {\n              setSelectedNode(\n                selectedNode === 0 ? semesterInfo.length - 1 : selectedNode - 1\n              )\n              setCurrentSemester(\n                selectedNode - 1 === -1\n                  ? semesterInfo[semesterInfo.length - 1]\n                  : semesterInfo[selectedNode - 1]\n              )\n            }}\n          />\n\n          <View\n            style={{ width: '80%', height: 40, borderBottomWidth: 0.3 }}\n          ></View>\n        </View>\n      ) : (\n        <View\n          style={{\n            width: '100%',\n            height: '20%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <Text style={{ color: colors.GREY, fontSize: 20 }}>Loading ...</Text>\n        </View>\n      )}\n    </SafeAreaView>\n  )\n}\n\n// STLYES - NOTE: Convert to inline\nconst styles: any = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    backgroundColor: 'black',\n  },\n  courseTitle: {\n    borderRadius: 5,\n    marginTop: 5,\n    width: '90%',\n    textAlign: 'left',\n  },\n  resultContainer: {\n    backgroundColor: 'black',\n    padding: 8,\n    width: '100%',\n    borderWidth: 0.3,\n    borderColor: 'white',\n  },\n  result: {\n    color: 'white',\n    fontSize: 15,\n    padding: 5,\n    fontWeight: '700',\n  },\n  inputStyles: {\n    borderWidth: 2,\n    borderRadius: 5,\n    padding: 10,\n    fontSize: 15,\n    flex: 5,\n    backgroundColor: 'white',\n  },\n  distLetter: {\n    paddingVertical: 8,\n    paddingLeft: 16,\n    // borderWidth: 2,\n    borderRadius: 10,\n    alignItems: 'center',\n    // borderColor: 'white',\n  },\n  distA: {\n    backgroundColor: colors.BLUE,\n    // borderRightWidth: 2,\n    borderBottomRightRadius: 0,\n    borderTopRightRadius: 0,\n  },\n  distB: {\n    backgroundColor: colors.GREEN,\n    borderRadius: 0,\n    // borderRightWidth: 2,\n    borderLeftWidth: 0,\n  },\n  distC: {\n    backgroundColor: colors.ORANGE,\n    borderRadius: 0,\n    // borderRightWidth: 2,\n    borderLeftWidth: 0,\n  },\n  distF: {\n    backgroundColor: colors.RED,\n    borderRadius: 0,\n    // borderRightWidth: 2,\n    borderLeftWidth: 0,\n  },\n  distQ: {\n    backgroundColor: colors.PURPLE,\n    borderBottomLeftRadius: 0,\n    borderTopLeftRadius: 0,\n    borderLeftWidth: 0,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}