{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { colors, randomColor } from \"../assets/colors\";\nimport { Icon } from 'react-native-elements';\nimport { useNavigation } from '@react-navigation/native';\nimport { useState } from 'react';\nimport fuzzysort from 'fuzzysort';\nimport React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function Professor(Props) {\n  var allCourses = Array.from(_toConsumableArray(new Set(Props.route.params.courses.map(function (obj) {\n    return obj.course;\n  })))).sort();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      wordEntered = _useState2[0],\n      setWordEntered = _useState2[1];\n\n  var _useState3 = useState(allCourses),\n      _useState4 = _slicedToArray(_useState3, 2),\n      courses = _useState4[0],\n      setCourses = _useState4[1];\n\n  var navigation = useNavigation();\n\n  function handleSearch(search, courses, setCourses) {\n    setCourses(search.length === 0 ? allCourses : fuzzysort.go(search, courses).map(function (item) {\n      return item.target;\n    }));\n  }\n\n  return _jsx(SafeAreaView, {\n    style: styles.container,\n    children: _jsxs(View, {\n      children: [_jsx(View, {\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'flex-end',\n          width: '90%',\n          marginBottom: 5\n        },\n        children: _jsxs(Text, {\n          style: [styles.title, {\n            width: '100%'\n          }],\n          children: [Props.route.params.profName, ' ', _jsx(Text, {\n            style: {\n              color: 'white',\n              fontSize: 25,\n              fontWeight: '300',\n              textAlign: 'right'\n            },\n            children: \"Courses\"\n          })]\n        })\n      }), _jsx(View, {\n        style: {\n          width: '95%',\n          marginTop: 0\n        },\n        children: _jsxs(View, {\n          style: {\n            flexDirection: 'row',\n            width: '100%',\n            alignItems: 'center'\n          },\n          children: [_jsx(Icon, {\n            name: \"search\",\n            style: {\n              opacity: 0.7,\n              marginLeft: 5,\n              zIndex: 1\n            },\n            tvParallaxProperties: null\n          }), _jsx(TextInput, {\n            onChangeText: function onChangeText(word) {\n              setWordEntered(word);\n              handleSearch(word, courses, setCourses);\n            },\n            value: wordEntered,\n            clearTextOnFocus: true,\n            placeholder: \"search for course\",\n            style: [styles.inputStyles, {\n              color: 'black'\n            }]\n          })]\n        })\n      }), _jsx(ScrollView, {\n        style: styles.departments,\n        children: courses.map(function (course) {\n          return _jsx(TouchableOpacity, {\n            style: [styles.departmentContainer, {\n              shadowColor: randomColor()\n            }],\n            onPress: function onPress() {\n              navigation.navigate('Course', {\n                course: course,\n                prof: Props.route.params.profName\n              });\n            },\n            children: _jsxs(Text, {\n              style: styles.department,\n              children: [course.substring(0, 4), _jsx(Text, {\n                style: {\n                  color: 'white',\n                  opacity: 0.8,\n                  fontWeight: '300'\n                },\n                children: course.substring(4, course.length)\n              })]\n            })\n          }, undefined);\n        })\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginHorizontal: 'auto',\n    height: '85%',\n    backgroundColor: 'black'\n  },\n  title: {\n    textAlign: 'left',\n    fontSize: 40,\n    color: 'white'\n  },\n  departmentTitle: {\n    fontSize: 30,\n    textAlign: 'center',\n    color: 'white'\n  },\n  departmentContainer: {},\n  department: {\n    fontSize: 30,\n    textAlign: 'left',\n    color: 'white',\n    fontWeight: '500',\n    letterSpacing: 3,\n    paddingVertical: 8\n  },\n  departments: {},\n  inputStyles: {\n    borderRadius: 5,\n    padding: 10,\n    fontSize: 15,\n    width: '95%',\n    backgroundColor: 'white',\n    color: colors.GREY,\n    marginLeft: -30\n  }\n});","map":{"version":3,"sources":["/Users/elitracy/Documents/Coding/Projects/Profesy/public/components/Professor.tsx"],"names":["colors","randomColor","Icon","useNavigation","useState","fuzzysort","React","Professor","Props","allCourses","Array","from","Set","route","params","courses","map","obj","course","sort","wordEntered","setWordEntered","setCourses","navigation","handleSearch","search","length","go","item","target","styles","container","display","flexDirection","alignItems","width","marginBottom","title","profName","color","fontSize","fontWeight","textAlign","marginTop","opacity","marginLeft","zIndex","word","inputStyles","departments","departmentContainer","shadowColor","navigate","prof","department","substring","undefined","StyleSheet","create","justifyContent","marginHorizontal","height","backgroundColor","departmentTitle","letterSpacing","paddingVertical","borderRadius","padding","GREY"],"mappings":"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","sourcesContent":["// IMPORTS\nimport {\n  TouchableOpacity,\n  TextInput,\n  View,\n  ScrollView,\n  StyleSheet,\n  SafeAreaView,\n  Text,\n} from 'react-native'\nimport { colors, randomColor } from '../assets/colors'\nimport { Icon } from 'react-native-elements'\nimport { RootStackParamList, Course } from '../RootStackParams'\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack'\nimport { useNavigation } from '@react-navigation/native'\nimport { useState } from 'react'\nimport fuzzysort from 'fuzzysort'\nimport React from 'react'\n\ninterface Props {\n  route: { params: { profName: string; courses: Course[] } }\n}\n\ntype professorScreenProp = NativeStackNavigationProp<\n  RootStackParamList,\n  'Professor'\n>\n\nexport function Professor(Props: Props) {\n  // sort all of professor courses\n  const allCourses = Array.from([\n    ...new Set(\n      Props.route.params.courses.map((obj) => {\n        return obj.course\n      })\n    ),\n  ]).sort()\n\n  // SET STATES\n  const [wordEntered, setWordEntered] = useState('')\n  const [courses, setCourses] = useState(allCourses)\n\n  const navigation = useNavigation<professorScreenProp>()\n\n  // FZF String match\n  // handleSearch - Params(search:string, course:string[], setCourses:function)\n  function handleSearch(search: string, courses: string[], setCourses: any) {\n    setCourses(\n      search.length === 0\n        ? allCourses\n        : fuzzysort.go(search, courses).map((item) => {\n            return item.target\n          })\n    )\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View>\n        {/*HEADERS*/}\n        <View\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-end',\n            width: '90%',\n            marginBottom: 5,\n          }}\n        >\n          <Text style={[styles.title, { width: '100%' }]}>\n            {Props.route.params.profName}{' '}\n            <Text\n              style={{\n                color: 'white',\n                fontSize: 25,\n                fontWeight: '300',\n                textAlign: 'right',\n              }}\n            >\n              Courses\n            </Text>\n          </Text>\n        </View>\n\n        {/*SEARCH*/}\n        <View style={{ width: '95%', marginTop: 0 }}>\n          <View\n            style={{\n              flexDirection: 'row',\n              width: '100%',\n              alignItems: 'center',\n            }}\n          >\n            <Icon\n              name=\"search\"\n              style={{ opacity: 0.7, marginLeft: 5, zIndex: 1 }}\n              tvParallaxProperties={null}\n            />\n            <TextInput\n              onChangeText={(word) => {\n                setWordEntered(word)\n                handleSearch(word, courses, setCourses)\n              }}\n              value={wordEntered}\n              clearTextOnFocus={true}\n              placeholder=\"search for course\"\n              style={[styles.inputStyles, { color: 'black' }]}\n            />\n          </View>\n        </View>\n\n        {/*COURSE LIST*/}\n        <ScrollView style={styles.departments}>\n          {courses.map((course) => {\n            return (\n              <TouchableOpacity\n                style={[\n                  styles.departmentContainer,\n                  { shadowColor: randomColor() },\n                ]}\n                onPress={() => {\n                  navigation.navigate('Course', {\n                    course: course,\n                    prof: Props.route.params.profName,\n                  })\n                }}\n                key={undefined}\n              >\n                <Text style={styles.department}>\n                  {course.substring(0, 4)}\n                  <Text\n                    style={{\n                      color: 'white',\n                      opacity: 0.8,\n                      fontWeight: '300',\n                      /*(parseFloat(value.overallGPA) > 3.4) ? colors.BLUE\n                : (parseFloat(value.overallGPA) > 2.8) ? colors.GREEN \n                : (parseFloat(value.overallGPA)> 2.0) ? colors.ORANGE \n                : colors.RED*/\n                    }}\n                  >\n                    {course.substring(4, course.length)}\n                  </Text>\n                </Text>\n              </TouchableOpacity>\n            )\n          })}\n        </ScrollView>\n      </View>\n    </SafeAreaView>\n  )\n}\n\n// STYLES\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginHorizontal: 'auto',\n    height: '85%',\n    backgroundColor: 'black',\n  },\n  title: {\n    textAlign: 'left',\n    fontSize: 40,\n    color: 'white',\n  },\n  departmentTitle: {\n    fontSize: 30,\n    textAlign: 'center',\n    color: 'white',\n  },\n  departmentContainer: {\n    // marginHorizontal: 30,\n    // marginVertical: 10,\n    // shadowOffset: { width: 3, height: 2 },\n    // shadowOpacity: 1,\n    // shadowRadius: 0,\n  },\n  department: {\n    fontSize: 30,\n    textAlign: 'left',\n    color: 'white',\n    fontWeight: '500',\n    letterSpacing: 3,\n    paddingVertical: 8,\n  },\n  departments: {\n    // flex: 6,\n    // justifyContent: 'flex-start',\n    // paddingBottom: 100,\n    // height: '80%',\n  },\n  inputStyles: {\n    borderRadius: 5,\n    padding: 10,\n    fontSize: 15,\n    width: '95%',\n    backgroundColor: 'white',\n    color: colors.GREY,\n    marginLeft: -30,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}