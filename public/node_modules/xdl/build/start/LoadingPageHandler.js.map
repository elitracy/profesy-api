{"version":3,"sources":["../../src/start/LoadingPageHandler.ts"],"names":["LoadingEndpoint","DeepLinkEndpoint","onDeepLink","setOnDeepLink","listener","getPlatform","query","noCacheMiddleware","res","setHeader","loadingEndpointHandler","req","end","__dirname","toString","deeplinkEndpointHandler","projectRoot","url","isDevClient","projectUrl","UrlUtils","constructDevClientUrlAsync","hostType","constructManifestUrlAsync","statusCode","getLoadingPageHandler","next","pathname","exception","JSON","stringify","error"],"mappings":"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","sourcesContent":["import express from 'express';\nimport { readFile } from 'fs-extra';\nimport http from 'http';\nimport { resolve } from 'path';\nimport { parse } from 'url';\n\nimport { UrlUtils } from './../internal';\n\nexport const LoadingEndpoint = '/_expo/loading';\nexport const DeepLinkEndpoint = '/_expo/link';\n\ntype OnDeepLinkListener = (\n  projectRoot: string,\n  isDevClient: boolean,\n  platform: string | null\n) => Promise<void>;\n\nlet onDeepLink: OnDeepLinkListener = async () => {};\n\nexport function setOnDeepLink(listener: OnDeepLinkListener) {\n  onDeepLink = listener;\n}\n\nfunction getPlatform(query: { [x: string]: string | string[] | null }): string | null {\n  if (query['platform'] === 'android' || query['platform'] === 'ios') {\n    return query['platform'];\n  }\n\n  return null;\n}\n\nexport function noCacheMiddleware(\n  res: express.Response | http.ServerResponse\n): express.Response | http.ServerResponse {\n  res.setHeader('Cache-Control', 'private, no-cache, no-store, must-revalidate');\n  res.setHeader('Expires', '-1');\n  res.setHeader('Pragma', 'no-cache');\n  return res;\n}\n\nasync function loadingEndpointHandler(\n  req: express.Request | http.IncomingMessage,\n  res: express.Response | http.ServerResponse\n) {\n  res.setHeader('Content-Type', 'text/html');\n\n  res.end(\n    (await readFile(resolve(__dirname, './../../static/loading-page/index.html'))).toString('utf-8')\n  );\n}\n\nasync function deeplinkEndpointHandler(\n  projectRoot: string,\n  req: express.Request | http.IncomingMessage,\n  res: express.Response | http.ServerResponse\n) {\n  const { query } = parse(req.url!, true);\n  const isDevClient = query['choice'] === 'expo-dev-client';\n  if (isDevClient) {\n    const projectUrl = await UrlUtils.constructDevClientUrlAsync(projectRoot, {\n      hostType: 'localhost',\n    });\n    res.setHeader('Location', projectUrl);\n  } else {\n    const projectUrl = await UrlUtils.constructManifestUrlAsync(projectRoot, {\n      hostType: 'localhost',\n    });\n    res.setHeader('Location', projectUrl);\n  }\n\n  onDeepLink(projectRoot, isDevClient, getPlatform(query));\n\n  res.setHeader('Cache-Control', 'private, no-cache, no-store, must-revalidate');\n  res.setHeader('Expires', '-1');\n  res.setHeader('Pragma', 'no-cache');\n\n  res.statusCode = 307;\n  res.end();\n}\n\nexport function getLoadingPageHandler(projectRoot: string) {\n  return async (\n    req: express.Request | http.IncomingMessage,\n    res: express.Response | http.ServerResponse,\n    next: (err?: Error) => void\n  ) => {\n    if (!req.url) {\n      next();\n      return;\n    }\n\n    try {\n      const url = parse(req.url).pathname || req.url;\n      switch (url) {\n        case LoadingEndpoint:\n          await loadingEndpointHandler(req, noCacheMiddleware(res));\n          break;\n        case DeepLinkEndpoint:\n          await deeplinkEndpointHandler(projectRoot, req, noCacheMiddleware(res));\n          break;\n        default:\n          next();\n      }\n    } catch (exception) {\n      res.statusCode = 520;\n      if (typeof exception == 'object' && exception != null) {\n        res.end(\n          JSON.stringify({\n            error: exception.toString(),\n          })\n        );\n      } else {\n        res.end(`Unexpected error: ${exception}`);\n      }\n    }\n  };\n}\n"],"file":"LoadingPageHandler.js"}