"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadingEndpoint = exports.DeepLinkEndpoint = void 0;
exports.getLoadingPageHandler = getLoadingPageHandler;
exports.noCacheMiddleware = noCacheMiddleware;
exports.setOnDeepLink = setOnDeepLink;

function _fsExtra() {
  const data = require("fs-extra");

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function () {
    return data;
  };

  return data;
}

function _url() {
  const data = require("url");

  _url = function () {
    return data;
  };

  return data;
}

function _internal() {
  const data = require("./../internal");

  _internal = function () {
    return data;
  };

  return data;
}

const LoadingEndpoint = '/_expo/loading';
exports.LoadingEndpoint = LoadingEndpoint;
const DeepLinkEndpoint = '/_expo/link';
exports.DeepLinkEndpoint = DeepLinkEndpoint;

let onDeepLink = async () => {};

function setOnDeepLink(listener) {
  onDeepLink = listener;
}

function getPlatform(query) {
  if (query['platform'] === 'android' || query['platform'] === 'ios') {
    return query['platform'];
  }

  return null;
}

function noCacheMiddleware(res) {
  res.setHeader('Cache-Control', 'private, no-cache, no-store, must-revalidate');
  res.setHeader('Expires', '-1');
  res.setHeader('Pragma', 'no-cache');
  return res;
}

async function loadingEndpointHandler(req, res) {
  res.setHeader('Content-Type', 'text/html');
  res.end((await (0, _fsExtra().readFile)((0, _path().resolve)(__dirname, './../../static/loading-page/index.html'))).toString('utf-8'));
}

async function deeplinkEndpointHandler(projectRoot, req, res) {
  const {
    query
  } = (0, _url().parse)(req.url, true);
  const isDevClient = query['choice'] === 'expo-dev-client';

  if (isDevClient) {
    const projectUrl = await _internal().UrlUtils.constructDevClientUrlAsync(projectRoot, {
      hostType: 'localhost'
    });
    res.setHeader('Location', projectUrl);
  } else {
    const projectUrl = await _internal().UrlUtils.constructManifestUrlAsync(projectRoot, {
      hostType: 'localhost'
    });
    res.setHeader('Location', projectUrl);
  }

  onDeepLink(projectRoot, isDevClient, getPlatform(query));
  res.setHeader('Cache-Control', 'private, no-cache, no-store, must-revalidate');
  res.setHeader('Expires', '-1');
  res.setHeader('Pragma', 'no-cache');
  res.statusCode = 307;
  res.end();
}

function getLoadingPageHandler(projectRoot) {
  return async (req, res, next) => {
    if (!req.url) {
      next();
      return;
    }

    try {
      const url = (0, _url().parse)(req.url).pathname || req.url;

      switch (url) {
        case LoadingEndpoint:
          await loadingEndpointHandler(req, noCacheMiddleware(res));
          break;

        case DeepLinkEndpoint:
          await deeplinkEndpointHandler(projectRoot, req, noCacheMiddleware(res));
          break;

        default:
          next();
      }
    } catch (exception) {
      res.statusCode = 520;

      if (typeof exception == 'object' && exception != null) {
        res.end(JSON.stringify({
          error: exception.toString()
        }));
      } else {
        res.end(`Unexpected error: ${exception}`);
      }
    }
  };
}
//# sourceMappingURL=LoadingPageHandler.js.map