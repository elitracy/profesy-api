{"version":3,"sources":["../../src/commands/start.ts"],"names":["program","command","alias","description","helpGroup","option","urlOpts","allowOffline","asyncActionProjectDir","projectRoot","options","normalizeOptionsAsync","normalizedOptions","actionAsync","webOnly"],"mappings":";;;;;;;;;;;eAEgBA,OAAD,IAAkB;AAC/BA,EAAAA,OAAO,CACJC,OADH,CACW,cADX,EAEGC,KAFH,CAES,GAFT,EAGGC,WAHH,CAGe,sCAHf,EAIGC,SAJH,CAIa,MAJb,EAKGC,MALH,CAKU,sBALV,EAKkC,oCALlC,EAMGA,MANH,CAMU,aANV,EAMyB,+BANzB,EAOE;AAPF,GAQGA,MARH,CAQU,qBARV,EAQiC,kDARjC,EASGA,MATH,CASU,OATV,EASmB,0BATnB,EAUGA,MAVH,CAUU,UAVV,EAUsB,2BAVtB,EAWGA,MAXH,CAWU,UAXV,EAWsB,aAXtB,EAYGA,MAZH,CAYU,aAZV,EAYyB,oBAZzB,EAaGA,MAbH,CAaU,SAbV,EAaqB,sCAbrB,EAcGA,MAdH,CAcU,uCAdV,EAcmD,0CAdnD,EAeGA,MAfH,CAgBI,mBAhBJ,EAiBI,6FAjBJ,EAmBGA,MAnBH,CAmBU,YAnBV,EAmBwB,qCAnBxB,EAoBGC,OApBH,GAqBGC,YArBH,GAsBGC,qBAtBH,CAuBI,OAAOC,WAAP,EAA4BC,OAA5B,KAAwE;AACtE,UAAM;AAAEC,MAAAA;AAAF,QAA4B,mEAAa,2BAAb,GAAlC;AACA,UAAMC,iBAAiB,GAAG,MAAMD,qBAAqB,CAACF,WAAD,EAAcC,OAAd,CAArD;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAkB,mEAAa,oBAAb,GAAxB;AACA,WAAO,MAAMA,WAAW,CAACJ,WAAD,EAAcG,iBAAd,CAAxB;AACD,GA5BL;AA+BAZ,EAAAA,OAAO,CACJC,OADH,CACW,kBADX,EAEGC,KAFH,CAES,KAFT,EAGGC,WAHH,CAGe,4CAHf,EAIGC,SAJH,CAIa,MAJb,EAKGC,MALH,CAKU,OALV,EAKmB,0BALnB,EAMGA,MANH,CAMU,UANV,EAMsB,2BANtB,EAOGA,MAPH,CAOU,UAPV,EAOsB,aAPtB,EAQGA,MARH,CAQU,aARV,EAQyB,oBARzB,EASGA,MATH,CASU,SATV,EASqB,sCATrB,EAUGA,MAVH,CAUU,YAVV,EAUwB,qCAVxB,EAWGA,MAXH,CAWU,uCAXV,EAWmD,0CAXnD,EAYGA,MAZH,CAYU,mBAZV,EAY+B,sDAZ/B,EAaGA,MAbH,CAaU,sBAbV,EAakC,oCAblC,EAcGC,OAdH,GAeGC,YAfH,GAgBGC,qBAhBH,CAiBI,OAAOC,WAAP,EAA4BC,OAA5B,KAAwE;AACtE,UAAM;AAAEC,MAAAA;AAAF,QAA4B,mEAAa,2BAAb,GAAlC;AACA,UAAMC,iBAAiB,GAAG,MAAMD,qBAAqB,CAACF,WAAD,EAAc,EACjE,GAAGC,OAD8D;AAEjEI,MAAAA,OAAO,EAAE;AAFwD,KAAd,CAArD;AAIA,UAAM;AAAED,MAAAA;AAAF,QAAkB,mEAAa,oBAAb,GAAxB;AACA,WAAO,MAAMA,WAAW,CAACJ,WAAD,EAAcG,iBAAd,CAAxB;AACD,GAzBL;AA2BD,C","sourcesContent":["import type { RawStartOptions } from './start/parseStartOptions';\n\nexport default (program: any) => {\n  program\n    .command('start [path]')\n    .alias('r')\n    .description('Start a local dev server for the app')\n    .helpGroup('core')\n    .option('-s, --send-to [dest]', 'An email address to send a link to')\n    .option('-c, --clear', 'Clear the Metro bundler cache')\n    // TODO(anp) set a default for this dynamically based on whether we're inside a container?\n    .option('--max-workers <num>', 'Maximum number of tasks to allow Metro to spawn.')\n    .option('--dev', 'Turn development mode on')\n    .option('--no-dev', 'Turn development mode off')\n    .option('--minify', 'Minify code')\n    .option('--no-minify', 'Do not minify code')\n    .option('--https', 'To start webpack with https protocol')\n    .option('--force-manifest-type <manifest-type>', 'Override auto detection of manifest type')\n    .option(\n      '-p, --port <port>',\n      'Port to start the native Metro bundler on (does not apply to web or tunnel). Default: 19000'\n    )\n    .option('--no-https', 'To start webpack with http protocol')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(\n      async (projectRoot: string, options: RawStartOptions): Promise<void> => {\n        const { normalizeOptionsAsync } = await import('./start/parseStartOptions');\n        const normalizedOptions = await normalizeOptionsAsync(projectRoot, options);\n        const { actionAsync } = await import('./start/startAsync');\n        return await actionAsync(projectRoot, normalizedOptions);\n      }\n    );\n\n  program\n    .command('start:web [path]')\n    .alias('web')\n    .description('Start a Webpack dev server for the web app')\n    .helpGroup('core')\n    .option('--dev', 'Turn development mode on')\n    .option('--no-dev', 'Turn development mode off')\n    .option('--minify', 'Minify code')\n    .option('--no-minify', 'Do not minify code')\n    .option('--https', 'To start webpack with https protocol')\n    .option('--no-https', 'To start webpack with http protocol')\n    .option('--force-manifest-type <manifest-type>', 'Override auto detection of manifest type')\n    .option('-p, --port <port>', 'Port to start the Webpack bundler on. Default: 19006')\n    .option('-s, --send-to [dest]', 'An email address to send a link to')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(\n      async (projectRoot: string, options: RawStartOptions): Promise<void> => {\n        const { normalizeOptionsAsync } = await import('./start/parseStartOptions');\n        const normalizedOptions = await normalizeOptionsAsync(projectRoot, {\n          ...options,\n          webOnly: true,\n        });\n        const { actionAsync } = await import('./start/startAsync');\n        return await actionAsync(projectRoot, normalizedOptions);\n      }\n    );\n};\n"],"file":"start.js"}